@name Vethian AI 2.0

@inputs [Energy,Refinery,LSCore,WaterCore,ShipCore,Shield,Cloak,Gate,Rings,DriveCore,Transporter,Drive]:wirelink [DriveEnt,BrigEnt]:entity

@outputs Active WarpFactor Tractor Lockdown Alert:string AlertCol:vector AlertLightBrightness SDTimeLeft SDActive DistressCall DistressLocation:string Jam
@outputs GateFF GateRFF BridgeFF TransFF EngFF HangarFF CoreFF OtherFFs ##Forcefields
@outputs HangarDoor HangarDoorLeft HangarDoorRight Shutters BlastDoors BridgeDoor GateRDoor EngDoor TransDoor OtherDoors ##Doors
@outputs Fire WepStrength WepRate BeamWepType TorpWepType TurretWepType ##Weapon Control
@outputs Warp [Destination,PrevPos]:vector AngleOffset:angle ##Warp Control

@persist [WaterCW,AimEFW,AimEW]:wirelink [WaterCE,AimEF,AimE]:entity [Shipname,DistressLocation,AimName]:string
@persist GateCol SDTimeLeft DCoreSpeed DCoreTurnSpeed AutoDistress WPlaced Repair Jam PrintOnSpawn [OpenInput TOpenInput LockInput]:string DoorFound
@persist SH CP HP AllFFs AllDoors [Prefix,WarpPrefix,TPPrefix]:string
@persist [PrevPos]:vector [WarpAng,PrevAng,DriveOffset]:angle DriveEnt:entity [WarpInput,AngInput,DestInput]:string
@persist [PadTarget,PadDest,PadBeam,TransBeamType,BeamName]:string BrigName:array [BeamFrom,BeamTo,AimET]:entity


#Made by Nova Astral
#Discord: Nova Astral#2079
#Steam: http://steamcommunity.com/profiles/76561198068127098
#Github: https://github.com/NovaAstral/Novas-Public-E2s/blob/main/Mainframes/vethian.txt


#This is the docs on command usage
#https://docs.google.com/document/d/1O2u7H4LFrC73PP-RpSY7yRGR4XEydbntwioRyLWV7Gk/


#If you want to make a suggestion/bug report,
#either use The Spartan Alliance discord channel for Vethian, or the github issues page


#Todo:
#Merge Iris Computer?
#Merge Gate Functions
#Make and Merge Targetting
#Full Weapons control
#Change Distress find to normal find and incorporate that into both new distress and player/ship find
#Remove most wire inputs by using autofind

#[
V2.0 Changes:
- Added even more colors to the prints
- Changed the alerts so you must do "/v alert <alert>" instead of "/v <alert>"
- Added the ability to "/v sd this" to shuttles
- Made it so Distress Calls and Water Place still work when the ship is parented (sort of, its buggy >:( )
- Added an owner print when you have PrintOnSpawn disabled
- Changed the wire input names of the Water Core, LS Core, and Ship Core
- Fixed the 'That is not a door' print to properly include the name of the thing you tried to open
- Added full Transporter Controls (All commands are in the Docs at '/v help')
- Added "/v sd pause" and "/v sd unpause"
- Made it so you can also say "/v sd abort" to stop the Self Destruct
- Made Tractor Beams a toggle ("/v tr" or "/v tractor")
- Made Repair Beam a toggle ("/v repair")
- Added Hangar Forcefield control "/v hff/hangff/hangarff"
- Added Pulsar Emitter Targetting "/v ctarget <player>" and "/v cuntarget <player>"
- Starfall Release
]#

#include "Novas-Public-E2s/library/nova_lib"

runOnChat(1)

O = owner()
OLS = owner():lastSaid():lower():explode(" ")

if(clk("config")){ #Main Config
    WarpFactor = 10 #This is the starting warp factor
    Shutters = 1 #This opens the shutters when the mainframe is spawned
    
    GateCol = 1 #Set this to 0 if you don't want your stargate event horizon to change colors on alert

    PrintOnSpawn = 1 #Set this to 0 to stop printing to faction on e2 spawn

    Shipname = "Shipname" #Change this to the name of your ship

    #AutoDistress = 1 #Disable this if you don't want your ship to send a distress call at 30% hull
    #This isn't implemented yet
    
    Prefix = "/v" #Set this to the prefix you need to enter first in chat for any commands
    WarpPrefix = "/warp" #This is the Warp Prefix for using the warp drive
    TPPrefix = "/pad" #This is the Transport Prefix for using the Transporter Pad
    
    WepStrength = 10 #I would set these lower if you dont have alot of resources
    WepRate = 10
    
    AlertGreen = vec(0) #Alert colors for the light outputs
    AlertBlue = vec(0,0,255)
    AlertRed = vec(255,0,0)
    AlertBlack = vec(255)
}

if(clk("spawnprint")){
    if(PrintOnSpawn == 1){
        if(Shipname != "Shipname"){
            botSay("AI"," [Vethian] ",ColPink,"Vethian AI v2.0 active from: <" +owner():name()+ "> on: <" +Shipname+ ">")
            LSCore["Name",string] = Shipname
        }
        else{
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship name not set. Set it on",ColRed," [Line 65] ",ColOng,"of the mainframe.")
        }
    }
    else{
        if(Shipname != "Shipname"){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Vethian AI v2.0 WIP active on: ",ColGrn,Shipname)
            LSCore["Name",string] = Shipname
        }
        else{
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship name not set. Set it on",ColRed," [Line 65] ",ColOng,"of the mainframe.")
        }
    }
}

if(first() | dupefinished()){ #Function Setup
    timer("config",1)
    timer("spawnprint",1000)
    
    Active = 1
    
    LocList = WarpLoc:keys():concat(", ")
    
    function void warp(WarpVec:vector,Ang:angle){
        if(WarpVec == vec(0,0,0)){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot warp to ",ColRed,"[0,0,0]")
        }
        else{
            if(isJammed(WarpVec)){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Destination ",ColRed,"Jammed",ColOng," cannot warp.")
                return
            }
            PrevPos = DriveEnt:pos()
            PrevAng = DriveEnt:angles()
            Drive[DestInput,vector] = WarpVec
            Drive[AngInput,angle] = Ang
            Destination = WarpVec
            AngleOffset = Ang
            
            timer("resetwarp",1000)
            timer("warp",100)
        }
    }
    
    function void transport(Ent:entity,Pos:vector,BeamType:string){
        if(Transporter:entity():type() == "transporter_pad"){
            PadTarget = "Target1"
            PadDest = "TargetLocation"
            
            if(BeamType == "vector"){
                PadBeam = "Beam to vector"
            }
            
            if(BeamType == "beamup"){
                PadBeam = "Energise pad"
            }
            
            if(BeamType == "beamdown"){
                PadBeam = "Beam from pads"
            }
        }
        
        if(Transporter:entity():type() == "asgard_transporter"){
            PadTarget = "Target"
            PadDest = "Destination"
            
            if(BeamType == "vector"){
                PadBeam = "Send"
            }
            
            if(BeamType == "beamup"){
                PadBeam = "Retrieve"
            }
            
            if(BeamType == "beamdown"){
                PadBeam = "Send"
            }
        }
        
        TransBeamType = BeamType
        
        Transporter[PadTarget,entity] = Ent
        Transporter[PadDest,vector] = Pos
        
        timer("beam",10)
        timer("resetbeam",1000)
    }
    
    function number jamCheck(Ent:entity,Pos:vector,PadCheck:number){
        local JamYes = 1
        local JamNo = 0
        
        if(isJammed(Pos)){
            if(Ent:isPlayer()){
                if(Ent == owner()){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",teamColor(Ent:team()),"You",ColOng," are ",ColRed,"Jammed!")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",teamColor(Ent:team()),Ent:name(),ColOng," is ",ColRed,"Jammed!")
                }
            }
            else{
                if(Ent == BrigEnt){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"The ",ColGrn,"Brig",ColOng," is ",ColRed,"Jammed!")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColGrn,Ent:getName(),ColOng," is ",ColRed,"Jammed!")
                }
            }
            return JamYes
        }
        else{
            return JamNo
        }
        
        if(PadCheck == 1){
            if(isJammed(Transporter:entity():pos())){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"The ",ColGrn,"Transporter",ColOng," is ",ColRed,"Jammed!")
                
                return JamYes
            }
            else{
                return JamNo
            }
        }
    }
    
    function void allDoors(DoorOpen:number){
        if(DoorOpen == 1){
            BridgeDoor = 1
            GateRDoor = 1
            TransDoor = 1
            EngDoor = 1
            Shutters = 1
            BlastDoor = 1
            OtherDoors = 0
        }
        
        if(DoorOpen == 0){
            BridgeDoor = 0
            GateRDoor = 0
            TransDoor = 0
            EngDoor = 0
            Shutters = 0
            BlastDoor = 0
            OtherDoors = 0
        }
    }

    function void allForceFields(FFActive:number){
        if(FFActive == 1){
            BridgeFF = 1
            GateRFF = 1
            GateFF = 1
            TransFF = 1
            EngFF = 1
            CoreFF = 1
            OtherFFs = 1
        }
        
        if(FFActive == 0){
            BridgeFF = 0
            GateRFF = 0
            GateFF = 0
            TransFF = 0
            EngFF = 0
            CoreFF = 0
            OtherFFs = 0
        }
    }
}

#################
####Stargazer####
#################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "power"){
            if(!Energy:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Energy Core not linked!")
            }
            else{
                if(Energy["Active",number] == 0){
                    Energy["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Energy Generation ",ColGrn,"Online")
                }
                else{
                    Energy["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Energy Generation ",ColRed,"Offline")
                }
            }
        }
        
        if(OLS[2,string] == "refine"){
            if(!Refinery:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Refinery not linked!")
            }
            else{
                if(Refinery["Active",number] == 0){
                    Refinery["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Refinery ",ColGrn,"Online")
                }
                else{
                    Refinery["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Refinery ",ColRed,"Offline")
                }
            }
        }

        if(OLS[2,string] == "ls"){
            if(!LSCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Life Support Core not linked!")
            }
            else{
                if(LSCore["Active",number] == 0){
                    LSCore["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Life Support ",ColGrn,"Online")
                }
                else{
                    LSCore["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Life Support ",ColRed,"Offline")
                }
            }
        }

        if(OLS[2,string] == "noclip"){
            if(!LSCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Life Support Core not linked!")
            }
            else{
                if(OLS[3,string] == "on"){
                    LSCore["Disable Noclip",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Anti-Noclip ",ColGrn,"Disabled")
                }
                if(OLS[3,string] == "off"){
                    LSCore["Disable Noclip",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Anti-Noclip ",ColGrn," Enabled")
                }
                if(OLS[3,string] == "fac"){
                    LSCore["Disable Noclip",number] = 2
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Faction only noclip ",ColGrn," Enabled")
                }
                if(OLS[3,string] == "ally"){
                    LSCore["Disable Noclip",number] = 3
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Alliance only noclip ",ColGrn," Enabled")
                }
            }
        }
    
        if(OLS[2,string] == "mute"){
            LSCore["Mute",number] = 1
            Energy["Mute",number] = 1
            Refinery["Mute",number] = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cores Muted.")
        }
        if(OLS[2,string] == "unmute"){
            LSCore["Mute",number] = 0
            Energy["Mute",number] = 0
            Refinery["Mute",number] = 0
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cores Unmuted.")
        }

        if(OLS[2,string] == "water"){
            if(!WaterCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Water Core not linked!")
            }
            else{
                WaterCW = WaterCore["Collector",entity]:wirelink()
                WaterCE = WaterCore["Collector",entity]
                timer("collect",100)
            }
        }

        if(OLS[2,string] == "wplace"){
            if(!WaterCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Water Core not linked!")
            }
            else{
                WaterCore["Spawn Collector",number] = 1
                timer("placeclct",100)
                timer("setclct",10)
            }
        }
    }
}

if(clk("collect")){
    if(WaterCE:isValid()){
        if(WaterCW["Active",number] == 0){
            WaterCW["Activate",number] = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector ",ColGrn,"Online.")
        }
        else{
            WaterCW["Activate",number] = 0
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector ",ColRed,"Offline.")
        }
    }
    else{
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Water Collector not placed. Cannot collect water.")
    }
}

if(clk("setclct")){
    WaterCW = WaterCore["Collector",entity]:wirelink()
    WaterCE = WaterCore["Collector",entity]
    
    if(WaterCore:entity():parent():isValid()){
        findIncludeEntity(WaterCore:entity():parent())
        print("valid")
    }
    else{
        findIncludeEntity(WaterCore:entity())
        print("non")
    }
}

if(clk("placeclct")){
    WaterCE:propFreeze(1)
    
    print(find())
        
    if(findInBox(vec(15837,-9,15839),vec(-15836,-15836,32)) == 1){ #pegasus
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: ",ColGrn,"Shakuras")
        WaterCE:setPos(vec(-6818,-7200,6730))
        WPlaced = 1
    }
    
    if(findInBox(vec(15839,15835,15834),vec(-15839,35,33)) == 1){ #milkyway
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: ",ColGrn,"Earth")
        WaterCE:setPos(vec(-1260,7982,7942))
        WPlaced = 1
    }
    
    if(findInBox(vec(15831,-15835,0),vec(-15837,-2269,-14015)) == 1){ #desert
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: ",ColGrn,"Desert")
        WaterCE:setPos(vec(11350,-9220,-9360))
        WPlaced = 1
    }
    
    if(findInBox(vec(-15837,-2269,-14015),vec(15837,15838,0)) == 1){ #hiigara
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: ",ColGrn,"Hiigara")
        WaterCE:setPos(vec(5654,6201,-6194))
        WPlaced = 1
    }
    
    elseif(WPlaced == 0){ #This only triggers if you're in build/members/admin
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Cannot place water collector here.")
    }
        
    WPlaced = 0
}



####################
####Core Systems####
####################

if(chatClk(O)){ #Yes I know I don't need to do this every time, but it feels better to me because of timers
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "plating"){
            if(!ShipCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked!")
            }
            else{
                if(ShipCore["Plating Enabled",number] == 0){
                    ShipCore["Enable Plating",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Plating Generation ",ColGrn,"Enabled")
                }
                else{
                    ShipCore["Enable Plating",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Plating Generation ",ColRed,"Disabled")
                }
            }
        }

        if(OLS[2,string] == "repair"){
            if(!ShipCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked!")
            }
            else{
                Repair = !Repair
                if(Repair == 1){
                    ShipCore["Fire Repair Beam",number] = 1
                    
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Repair Beam ",ColGrn,"Firing")
                }
                else{
                    ShipCore["Fire Repair Beam",number] = 0
                    
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Repair Beam ",ColRed,"Offline")
                }
            }
        }

        if(OLS[2,string] == "tr" | OLS[2,string] == "tractor"){
            Tractor = !Tractor
            if(Tractor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Tractor Beam ",ColGrn,"Enabled.")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Tractor Beam ",ColRed,"Disabled.")
            }
        }
            
        if(OLS[2,string] == "shield"){
            if(!Shield:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Shield not linked!")
            }
            else{
                if(Shield["Active",number] == 0){
                    Shield["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shield ",ColGrn,"Activated.")
                }
                else{
                    Shield["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shield ",ColRed,"Deactivated.")
                }
            }
        }
            
        if(OLS[2,string] == "cloak"){
            if(!Cloak:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Cloaking Device not linked!")
            }
            else{
                if(Cloak["Active",number] == 0){
                    Cloak["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cloak ",ColGrn,"Activated.")
                }
                else{
                    Cloak["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cloak ",ColRed,"Deactivated.")
                }
            }
        }

        if(OLS[2,string] == "startup"){
            if(!ShipCore:entity():isValid() | !LSCore:entity():isValid() | !Energy:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Cannot activate ship systems! Something isn't linked!")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Activating ship systems. Turning on Plating generation, Life Support, and Power.")
                ShipCore["Enable Plating",number] = 1
                LSCore["Activate",number] = 1
                Energy["Activate",number] = 1
            }
        }
        
        if(OLS[2,string] == "sd"){
            if(OLS[3,string] == "this" | OLS[3,string] == "that"){
                AimE = owner():aimEntity()
                
                if(AimE:isValid()){
                    if(AimE:type() == "ship_core" | AimE:type() == "atlantis_puddle_jumper" | AimE:type() == "sci_fi_shuttle" | AimE:type() == "st_shuttle_type11" | AimE:type() == "st_shuttle_type6" | AimE:type() == "st_shuttle_type9"){
                        AimEW = AimE:wirelink()
                        AimEW["Self Destruct",number] = 1
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destructing that ",ColGrn,AimE:getName(),ColOng," owned by ",teamColor(AimE:owner():team()),AimE:owner())
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColRed,AimE:getName(),ColOng," is not a Ship Core.")
                    }
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You're not aiming at anything.")
                }
            }

        
            if(OLS[3,string] == "stop" | OLS[3,string] == "abort"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aborting Self Destruct.")
                ShipCore:entity():stopCoreEnvironmentSound()
                
                stoptimer("sdtime")
                
                SDTimeLeft = 0
                SDActive = 0
            }

            if(OLS[3,string] == "pause"){
                if(SDActive == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destuct isn't active.")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Pausing Self Destruct.")
                    ShipCore:entity():stopCoreEnvironmentSound()
                    
                    stoptimer("sdtime")
                }
            }

            if(OLS[3,string] == "unpause"){
                if(SDActive == 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destuct is already active.")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unpausing Self Destruct.")
                    ShipCore:entity():setCoreEnvironmentSound("alarm/sga_midway_selfdestruct.wav",1,100)
                    
                    timer("sdtime",10)
                }
            }
            
            
            if(OLS[3,string] != "this" & OLS[3,string] != "that" & OLS[3,string] != "stop" & OLS[3,string] != "pause" & OLS[3,string] != "unpause" & OLS[3,string] != "abort"){
                if(!ShipCore:entity():isValid()){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked!")
                }
                else{
                    if(OLS[3,string]:toNumber() == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"No time specified. Activating Self Destruct.")
                        
                        ShipCore["Self Destruct",number] = 1
                    }
                    else{
                        SDTimeLeft = OLS[3,string]:toNumber()
                        SDActive = 1
                        ShipCore:entity():setCoreEnvironmentSound("alarm/sga_midway_selfdestruct.wav",1,100)
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct activated for <"+ SDTimeLeft + "> seconds.")
                        timer("sdtime",10)
                    }
                }
            }
        }
    }
}

if(clk("sdtime")){
    timer("sdtime",1000)
    SDTimeLeft--
    
    if(SDTimeLeft == 0){
        ShipCore["Self Destruct",number] = 1
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship Destruct")
    }
    
    if(SDTimeLeft == 10){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct in 10 seconds.")
    }
    
    if(SDTimeLeft == 30){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct in 30 seconds.")
    }

    if(SDTimeLeft == 60){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct in 60 seconds.")
    }
}

##############  
####Alarms####
##############

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "alert"){
        
            if(OLS[3,string] == "green"){
                ShipCore:entity():setCoreEnvironmentSound("st/shuttlecraft/computer_work2.mp3",0.4,100)
                ShipCore:entity():stopCoreEnvironmentSound()
                
                Alert = "Green"
                AlertCol = AlertGreen
                
                stoptimer("alighton")
                stoptimer("alightoff")
                
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition ",ColGrn,"Green",ColOng," Stand Down.")
    
                if(GateCol == 1){
                    Gate["Event Horizon Color",vector] = vec(255,255,255)
                }
            }
    
            if(OLS[3,string] == "blue"){
                ShipCore:entity():setCoreEnvironmentSound("st/misc/bluealert.wav",0.4,100)
                
                Alert = "Blue"
                AlertCol = AlertBlue
                
                timer("alighton",1)
                
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition ",ColBlu,"Blue",ColOng," Prepare for Battle.")
                
                if(GateCol == 1){
                    Gate["Event Horizon Color",vector] = vec(0,0,255)
                }
            }
    
            if(OLS[3,string] == "red"){
                ShipCore:entity():setCoreEnvironmentSound("st/misc/voy_redalert_loop.wav",0.4,100)
                
                Alert = "Red"
                AlertCol = AlertRed
                
                timer("alighton",1)
                
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition ",ColRed,"Red",ColOng," Battle Stations.")
                
                if(GateCol == 1){
                    Gate["Event Horizon Color",vector] = vec(255,0,0)
                }
            }
    
            if(OLS[3,string] == "black"){
                ShipCore:entity():setCoreEnvironmentSound("st/misc/dsc_black_alert_short.wav",0.4,100)
                
                Alert = "Black"
                AlertCol = AlertBlack
                
                timer("alighton",1)
    
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition ",ColWht,"Black",ColOng," Shipwide Experiment.")
                
                if(GateCol == 1){
                    Gate["Event Horizon Color",vector] = vec(50,50,50)
                }
            }

            if(OLS[3,string] == "abandon"){
                ShipCore:entity():setCoreEnvironmentSound("st/misc/abandon_ship.wav",0.4,100)
                
                Alert = "Abandon Ship"
                AlertCol = AlertRed
                
                timer("alighton",1)
                
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Abandon Ship!")
    
                if(GateCol == 1){
                    Gate["Event Horizon Color",vector] = vec(200,0,0)
                }
            }
        }

        if(OLS[2,string] == "ldon"){
            ShipCore:entity():setCoreEnvironmentSound("st/misc/rom_redalert.wav",0.4,100)
            
            allDoors(0)
            allForceFields(1)
            
            Lockdown = 1
            
            Rings["UnUsable",number] = 1
            Shield["Activate",number] = 1
            LSCore["Disable Noclip",number] = 1
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship Lockdown ",ColGrn,"Activated")
        }

        if(OLS[2,string] == "ldoff"){
            ShipCore:entity():setCoreEnvironmentSound("st/shuttlecraft/computer_work2.mp3",0.4,100)
            ShipCore:entity():stopCoreEnvironmentSound()
            
            allForceFields(0)
            
            Lockdown = 0

            Rings["UnUsable",number] = 0
            LSCore["Disable Noclip",number] = 0
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship Lockdown ",ColRed,"Deactivated")
        }
    }
}

if(clk("alighton")){
    AlertLightBrightness = 5
    timer("alightoff",1000)
}

if(clk("alightoff")){
    AlertLightBrightness = 0
    timer("alighton",1000)
}

#########################
####Doors/Forcefields####
#########################
if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "bridge" | OLS[2,string] == "br"){1
            BridgeDoor = !BridgeDoor
            if(BridgeDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Door ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Door ",ColRed,"Closed")
            }
        }
        if(OLS[2,string] == "bridgeff" | OLS[2,string] == "brff"){
            BridgeFF = !BridgeFF
            if(BridgeFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Forcefield ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "gateroom" | OLS[2,string] == "gr"){
            GateRDoor = !GateRDoor
            if(GateRDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gateroom Door ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gateroom Door ",ColRed,"Closed")
            }
        }
        if(OLS[2,string] == "gateroomff" | OLS[2,string] == "grff"){
            GateRFF = !GateRFF
            if(GateRFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gateroom Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gateroom Forcefield ",ColRed,"Deactivated")
            }
        }
        if(OLS[2,string] == "gateff" | OLS[2,string] == "gff"){
            GateFF = !GateFF
            if(GateFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gate Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gate Forcefield ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "trans" | OLS[2,string] == "transporter"){
            TransDoor = !TransDoor
            if(TransDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Door ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Door ",ColRed,"Closed")
            }
        }
        if(OLS[2,string] == "transff"){
            TransFF = !TransFF
            if(TransFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Forcefield ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "eng" | OLS[2,string] == "engineering"){
            EngDoor = !EngDoor
            if(EngDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Door ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Door ",ColRed,"Closed")
            }
        }
        if(OLS[2,string] == "engff" | OLS[2,string] == "engineeringff"){
            EngFF = !EngFF
            if(EngFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Forcefield ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "coreff"){
            CoreFF = !CoreFF
            if(CoreFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Core Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Core Forcefield ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "lh" | OLS[2,string] == "lhangar" | OLS[2,string] == "lefthangar"){
            HangarDoorLeft = !HangarDoorLeft
            if(HangarDoorLeft == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Left Hangar ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Left Hangar ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "rh" | OLS[2,string] == "rhangar" | OLS[2,string] == "righthangar"){
            HangarDoorRight = !HangarDoorRight
            if(HangarDoorRight == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Right Hangar ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Right Hangar ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "h" | OLS[2,string] == "hang" | OLS[2,string] == "hangar"){
            HangarDoor = !HangarDoor
            if(HangarDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Hangar ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Hangar ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "hff" | OLS[2,string] == "hangff" | OLS[2,string] == "hangarff"){
            HangarFF = !HangarFF
            if(HangarFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Hangar Forcefield ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Hangar Forcefield ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "shut" | OLS[2,string] == "shutters"){
            Shutters = !Shutters
            if(Shutters == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shutters ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shutters ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "bulk" | OLS[2,string] == "blast"){
            BlastDoors = !BlastDoors
            if(BlastDoors == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Blast Doors ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Blast Doors ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "otherdoors" | OLS[2,string] == "odoors"){
            OtherDoors = !OtherDoors
            if(OtherDoors == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Other Doors ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Other Doors ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "otherforcefields" | OLS[2,string] == "offs"){
            OtherFFs = !OtherFFs
            if(OtherFFs == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Other Forcefields ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Other Forcefields ",ColRed,"Deactivated")
            }
        }
        
        if(OLS[2,string] == "doors" | OLS[2,string] == "alldoors"){
            AllDoors = !AllDoors
            allDoors(AllDoors)
            if(AllDoors == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"All Doors ",ColGrn,"Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"All Doors ",ColRed,"Closed")
            }
        }
        
        if(OLS[2,string] == "forcefields" | OLS[2,string] == "ffs"){
            AllFFs = !AllFFs
            allForceFields(AllFFs)
            if(AllFFs == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"All Forcefields ",ColGrn,"Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"All Forcefields ",ColRed,"Deactivated")
            }
        }
    }
}

############
####Misc####
############

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "sugged"){
            botSayAlliance("Vethian",owner():name(),ColTeam,"sugged xd")
        }
        
        if(OLS[2,string] == "asay"){
            botSayAlliance("Vethian",owner():name(),ColTeam,owner():lastSaid():sub(6+Prefix:length()))
        }
        
        if(OLS[2,string] == "fsay"){
            botSay("Vethian",owner():name(),ColTeam,owner():lastSaid():sub(6+Prefix:length()))
        }
        
        if(OLS[2,string] == "o'neill"){
            timer("whacko",1) # :)
        }

#[      
        #ship/player location  THIS DOESNT WORK BECAUSE E2 HAS NO STARGAZER FUNCTIONS DAMMIT
        if(OLS[2,string] == "sloc"){
            Env = ShipCore:getEnvironmentData()
            printColor(ColTeam,"[AI]",ColPink," [Vethian]",ColOng,"The ship is located at: " +Env)
        }
]#

        if(OLS[2,string] == "reset"){
            reset()
        }

        if(OLS[2,string] == "help"){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Vethian Help can be found at:")
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"https://docs.google.com/document/d/1O2u7H4LFrC73PP-RpSY7yRGR4XEydbntwioRyLWV7Gk")
        }
        
        if(OLS[2,string] == "activate" | OLS[2,string] == "deactivate" | OLS[2,string] == "enable" | OLS[2,string] == "disable" | OLS[2,string] == "work" | OLS[2,string] == "workn't"){
            AimE = owner():aimEntity()
            
            if(AimE:isValid()){
                if(AimE:type() == "st_forcefield"){
                    AimEW = AimE:parent():wirelink()
                    AimName = "Forcefield"
                }
                else{
                    AimEW = owner():aimEntity():wirelink()
                    AimName = AimE:getName()
                }
                
                if(AimEW:hasInput("Activate")){
                    if(OLS[2,string] == "activate" | OLS[2,string] == "work"){
                        if(AimEW["Active",number] == 1){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColGrn,AimName,ColOng," is already ",ColGrn,"activated!")
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Activating that ",ColGrn,AimName)
                            
                            AimEW["Activate",number] = 1
                        }
                    }
                    
                    if(OLS[2,string] == "deactivate" | OLS[2,string] == "workn't"){
                        if(AimEW["Active",number] == 0){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColGrn,AimName,ColOng," is already ",ColRed,"deactivated!")
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Deactivating that ",ColGrn,AimName)
                            
                            AimEW["Activate",number] = 0
                        }
                    }
                    
                    if(OLS[2,string] == "enable"){
                        if(AimEW["Active",number] == 1){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColGrn,AimName,ColOng," is already ",ColGrn,"activated!")
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Activating that ",ColGrn,AimName,ColOng," for 5 seconds.")
                            
                            AimEW["Activate",number] = 1
                            timer("disableent",5000)
                        }
                    }
                    
                    if(OLS[2,string] == "disable"){
                        if(AimEW["Active",number] == 0){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColGrn,AimName,ColOng," is already ",ColRed,"deactivated!")
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Deactivating that ",ColGrn,AimName,ColOng," for 5 seconds.")
                            
                            AimEW["Activate",number] = 0
                            timer("enableent",5000)
                        }
                    }
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColGrn,AimName,ColOng," does not have an Activate input.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
            }
        }
        
        if(OLS[2,string] == "open" | OLS[2,string] == "close" | OLS[2,string] == "lock" | OLS[2,string] == "unlock"){
            AimE = owner():aimEntity()

            if(AimE:isValid()){
                AimEW = owner():aimEntity():wirelink()
                
                if(AimE:type() == "sbep_base_door_controller" | AimE:type() == "sbep_base_door"){
                    DoorFound = 1
                    AimName = "SBEP Door"
                    
                    if(AimE:type() == "sbep_base_door_controller"){
                        DoorFrame = AimEW
                    }
                    else{
                        DoorFrame = AimE:parent():wirelink()
                    }
                    
                    if(OLS[3,string]:length() == 0){
                        OpenInput = "Open_1"
                        LockInput = "Lock_1"
                    }
                    else{
                        OpenInput = "Open_"+OLS[3,string]
                        LockInput = "Lock_"+OLS[3,string]
                    }
                }
                elseif(AimE:type() == "cap_doors_frame" | AimE:type() == "cap_doors"){
                    DoorFound = 1
                    TOpenInput = "Toggle"
                    LockInput = "Lockdown"
                    AimName = "CAP Door"
                    
                    if(AimE:type() == "cap_doors_frame"){
                        DoorFrame = AimEW
                    }
                    else{
                        DoorFrame = AimE:parent():wirelink()
                    }
                    
                    timer("ToggleDoorReset",10)
                }
                elseif(AimE:type() == "sci_fi_door" | AimE:type() == "sci_fi_door_anim"){
                    DoorFound = 1
                    OpenInput = "Open"
                    LockInput = "Lock"
                    AimName = "Sci-fi Door"
                    
                    if(AimE:type() == "sci_fi_door"){
                        DoorFrame = AimEW
                    }
                    else{
                        DoorFrame = AimE:parent():wirelink()
                    }
                    
                }
                else{
                    if(AimE:getName() == ""){
                        AimName = AimE:type()
                    }
                    else{
                        AimName = AimE:getName()
                    }
                    
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColRed,AimName,ColOng," is not a door or is not supported.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You're not looking at anything.")
            }
            
            if(OLS[2,string] == "open"){
                if(DoorFound == 1){
                    if(OLS[3,string]:length() > 0){
                        if(AimE:type() == "sbep_base_door" | AimE:type() == "sbep_base_door_controller"){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Opening door ",ColGrn,OLS[3,string],ColOng," on that ",ColGrn," SBEP Door")
                        }
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Opening that ",ColGrn,AimName)
                    }
                    
                    DoorFound = 0
                    DoorFrame[OpenInput,number] = 1
                    DoorFrame[TOpenInput,number] = 1
                }
            }
            
            if(OLS[2,string] == "close"){
                if(DoorFound == 1){
                    if(OLS[3,string]:length() > 0 & AimE:type() == "sbep_base_door_controller" | AimE:type() == "sbep_base_door"){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Closing door ",ColGrn,OLS[3,string],ColOng," on that ",ColGrn," SBEP Door")
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Closing that ",ColGrn,AimName)
                    }
                    
                    DoorFound = 0
                    DoorFrame[OpenInput,number] = 0
                    DoorFrame[TOpenInput,number] = 1
                }
            }
            
            if(OLS[2,string] == "lock"){
                if(DoorFound == 1){
                    if(OLS[3,string]:length() > 0 & AimE:type() == "sbep_base_door_controller" | AimE:type() == "sbep_base_door"){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Locking door ",ColGrn,OLS[3,string],ColOng," on that ",ColGrn," SBEP Door")
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Locking that ",ColGrn,AimName)
                    }
                    
                    DoorFound = 0
                    DoorFrame[LockInput,number] = 1
                }
            }
            
            if(OLS[2,string] == "unlock"){
                if(DoorFound == 1){
                    if(OLS[3,string]:length() > 0 & AimE:type() == "sbep_base_door_controller" | AimE:type() == "sbep_base_door"){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unlocking door ",ColGrn,OLS[3,string],ColOng," on that ",ColGrn," SBEP Door")
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unlocking that ",ColGrn,AimName)
                    }
                    
                    DoorFound = 0
                    DoorFrame[LockInput,number] = 0
                }
            }
        }        
    }
}

if(clk("ToggleDoorReset")){
    AimEW[TOpenInput,number] = 0
}

if(clk("enableent")){
    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Re-enabling the ",ColGrn,AimName)
    AimEW["Activate",number] = 1
}

if(clk("disableent")){
    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Re-disabling the ",ColGrn,AimName)
    AimEW["Activate",number] = 0
}

######################
####Gate/Rings/Jam####
######################
if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "closeg" | OLS[2,string] == "closegate"){
            if(!Gate:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Stargate not linked!")
            }
            else{
                Gate:stargateClose()
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Closing Gate.")
            }
        }
        if(OLS[2,string] == "dial"){
            if(!Gate:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Stargate not linked!")
            }
            else{
                if(OLS[4,string]:length() > 7 && Gate:stargateLocal() == 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Cannot dial outside of local group.")
                }
                else{
                    Gate["Dial Mode",number] = OLS[3,string]:toNumber()
                    Gate["Dial String",string] = OLS[4,string]
                    
                    if(OLS[3,string]:length() > 1){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Dial Mode cannot be a string")
                        timer("dialreset",100)
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dialing the gate to: ",ColGrn,OLS[4,string])
                        timer("gdial",100)
                    }
                }
            }
        }
        
        if(OLS[2,string] == "gsend"){
            if(!Gate:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Stargate not linked!")
            }
            else{
                if(Gate["Open",number] == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Gate isn't open, cannot send a message.")
                }
                else{
                    Gate:stargateTransmit(owner():lastSaid():sub(7+Prefix:length()))
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Message sent through gate: ",ColGrn,owner():lastSaid():sub(7+Prefix:length()))
                }
            }
        }
    }
}


if(clk("gdial")){
    Gate["Start String Dial",number] = 1
    timer("dialreset",2000)
}

if(clk("dialreset")){
    Gate["Dial Mode",number] = 0
    Gate["Dial String",string] = ""
    Gate["Start String Dial",number] = 0
}

###Rings###

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "rdial"){
            if(!Rings:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Rings not linked!")
            }
            else{
                if(OLS[3,string]:length() == 0){
                    if(Rings["Usable",number] == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Rings Disabled, Cannot dial.")
                    }
                    else{
                        Rings["Dial Closest",number] = 1
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dialing closest rings.")
                        timer("ringreset",100)
                    }
                }
            
                if(OLS[3,string]:length() > 0){
                    if(Rings["Usable",number] == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Rings Disabled, Cannot dial.")
                    }
                    else{
                        Rings["Dial Address",string] = OLS[3,string]
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dialing Rings to: ",ColGrn,OLS[3,string])
                        timer("ringreset",100)
                    }
                }
            }
        }
        
        if(OLS[2,string] == "ron"){
            if(!Rings:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Rings not linked!")
            }
            else{
                Rings["UnUsable",number] = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColGrn,"Rings Enabled")
            }
        }
            
        if(OLS[2,string] == "roff"){
            if(!Rings:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Rings not linked!")
            }
            else{
                Rings["UnUsable",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Rings Disabled")
            }
        }
    }
}


if(clk("ringreset")){
    Rings["Dial Address",string] = ""
    Rings["Dial Closest",number] = 0
}


###Jammer Control###
if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "jam"){
            Jam = !Jam
            if(Jam == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Jamming Device ",ColGrn,"Enabled")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Jamming Device ",ColRed,"Disabled")
            }
        }
    }
}

####################
###Weapon Control###
####################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "wstrength"){
            if(OLS[3,string]:toNumber() < 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Weapon Strength is: ",ColGrn,WepStrength)
            }
            elseif(OLS[3,string]:toNumber() > 10){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Strength cannot go above ",ColGrn,"10",ColOng,". Setting Weapon Strength to max.")
                WepStrength = 10
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Strength changed to: ",ColGrn,OLS[3,string]:toNumber())
                WepStrength = OLS[3,string]:toNumber()
            }
        }
        
        if(OLS[2,string] == "wrate"){
            if(OLS[3,string]:toNumber() < 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Weapon Rate is: ",ColGrn,WepStrength)
            }
            elseif(OLS[3,string]:toNumber() > 10){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Rate cannot go above ",ColGrn,"10",ColOng,". Setting Weapon Rate to max.")
                WepRate = 10
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Rate changed to: ",ColGrn,OLS[3,string]:toNumber())
                WepRate = OLS[3,string]:toNumber()
            }
        }
    
        if(OLS[2,string] == "btype"){
            if(BeamType:exists(OLS[3,string])){
                BeamWepType = BeamType[OLS[3,string],number]
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beam Weapon Type changed to: ",ColGrn,OLS[3,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unrecognized Beam Weapon Type: ",ColRed,OLS[3,string])
            }
        }
        
        if(OLS[2,string] == "ttype"){
            if(TorpType:exists(OLS[3,string])){
                TorpWepType = TorpType[OLS[3,string],number]
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Torpedo Weapon Type changed to: ",ColGrn,OLS[3,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unrecognized Torpedo Weapon Type: ",ColRed,OLS[3,string])
            }
        }
        
        if(OLS[2,string] == "turtype"){
            if(TurretType:exists(OLS[3,string])){
                TurretWepType = TurretType[OLS[3,string],number]
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Turret Weapon Type changed to: ",ColGrn,OLS[3,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unrecognized Turret Weapon Type: ",ColRed,OLS[3,string])
            }
        }
    
        if(OLS[2,string] == "fire"){
            Fire = !Fire
            
            if(Fire == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapons ",ColGrn,"Online")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapons ",ColRed,"Offline")
            }
        }
                
        if(OLS[2,string] == "emitters"){
            if(!ShipCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked!")
            }
            else{
                if(ShipCore["Emitters Enabled",number] == 0){
                    ShipCore["Enable Emitters",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Pulsar Emitters ",ColGrn,"Online.")
                }
                else{
                    ShipCore["Enable Emitters",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Pulsar Emitters ",ColRed,"Offline.")
                }
            }
        }

        if(OLS[2,string] == "taim"){
            AimEF = owner():aimEntity()

            if(AimEF:isValid()){
                AimEFW = owner():aimEntity():wirelink()

                if(AimEFW:hasInput("Fire")){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Selecting that ",ColGrn,AimEF:getName(),ColOng," as the testfire weapon")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"That ",ColRed,AimEF:getName(),ColOng," does not have a Fire input.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You're not aiming at anything.")
            }
        }
        
        if(OLS[2,string] == "tfire"){
            if(AimEF:isValid()){
                AimEFW["Fire",number] = 1

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Testfiring the ",ColGrn,AimEF:getName())

                timer("unaim",2500)
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You have not selected anything to fire.")
            }
        }
        
        if(OLS[2,string] == "ctarget"){
           if(!ShipCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked!")
            }
            else{
                local Ply = findPlayerByName(OLS[3,string])
                
                if(Ply:isPlayer()){
                    ShipCore:entity():addCoreTarget(Ply:steamID())
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Targetting ",teamColor(Ply:team()),Ply:name(),ColOng," with the Pulsar Emitters ")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[3,string])
                }
            }
        }
        
        if(OLS[2,string] == "cuntarget"){
            if(!ShipCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked!")
            }
            else{
                local Ply = findPlayerByName(OLS[3,string])
                
                if(Ply:isPlayer()){
                    ShipCore:entity():removeCoreTarget(Ply:steamID())
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Un-Targetting ",teamColor(Ply:team()),Ply:name(),ColOng," with the Pulsar Emitters")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[3,string])
                }
            }
        }
    }
}

if(clk("unaim")){
    AimEFW["Fire",number] = 0
}

##########
###Warp###
##########
if(chatClk(O)){
    if(OLS[1,string] == WarpPrefix){
        hideChat(1)
        WarpF = 0
        
        if(OLS[2,string] == "help" | OLS[2,string] == "loc" | OLS[2,string] == "locations"){
            WarpF = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warp Locations:")
            #printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Milk, Earth, Moon, Pegasus, Shakur, Shakbase, Universe, Unicorner, Hiigara, Hiibase, Desert, Lava, Members, Build, Build2, Build3, Build4")
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,WarpLoc:keys():concat(", "))
        }
        
        if(OLS[2,string] == "vec"){
            WarpF = 1
            local V = OLS[3,string]:explode(",")
            local X = V[1,string]:toNumber()
            local Y = V[2,string]:toNumber()
            local Z = V[3,string]:toNumber()
            
            local Dest = round(vec(X,Y,Z))
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to Vector: ",ColGrn,Dest)
            warp(Dest,AngleOffset)
        }
            
        if(OLS[2,string] == "ang" | OLS[2,string] == "angle"){
            if(OLS[3,string] == "reset"){
                WarpF = 1
                local AngOffset = DriveEnt:toLocal(ang(0,0,0)) + DriveOffset
                local Dest = DriveEnt:pos()
                
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Resetting ship angles: ",ColGrn,AngOffset)
                warp(Dest,AngOffset)
            }
            elseif(OLS[3,string] != "reset"){
                WarpF = 1
                local V = OLS[3,string]:explode(",")
                local X = V[1,string]:toNumber()
                local Y = V[2,string]:toNumber()
                local Z = V[3,string]:toNumber()
        
                local Ang = round(ang(X,Y,Z))
                local Dest = DriveEnt:pos()
                
                warp(Dest,Ang)
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Rotating to angle offset: ",ColGrn,Ang)
            }
        }
        
        if(OLS[2,string] == "forward" | OLS[2,string] == "back" | OLS[2,string] == "left" | OLS[2,string] == "right" | OLS[2,string] == "up" | OLS[2,string] == "down"){
        
            if(OLS[3,string]:toNumber() == 0 & OLS[2,string] != "back"){
                LWarp = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot warp nowhere")
                timer("warpdirreset",1000)
            }
            
            if(OLS[2,string] == "forward" & LWarp != 1){
                WarpF = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping forward by: ",ColGrn,OLS[3,string]:toNumber())
                Dest = DriveEnt:pos() + vec(OLS[3,string]:toNumber(),0,0)
            }
            
            if(OLS[2,string] == "back"){
                WarpF = 1

                if(OLS[3,string]:toNumber() == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to previous position: ",ColGrn,PrevPos)
                   
                    Dest = PrevPos
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping back by: ",ColGrn,OLS[3,string]:toNumber())
                    
                    Dest = DriveEnt:pos() - vec(OLS[3,string]:toNumber(),0,0)
                }
            }
            
            if(OLS[2,string] == "left" & LWarp != 1){
                WarpF = 1

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping left by: ",ColGrn,OLS[3,string]:toNumber())
                
                Dest = DriveEnt:pos() + vec(0,OLS[3,string]:toNumber(),0)
            }
            
            if(OLS[2,string] == "right" & LWarp != 1){
                WarpF = 1

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping right by: ",ColGrn,OLS[3,string]:toNumber())
                
                Dest = DriveEnt:pos() - vec(0,OLS[3,string]:toNumber(),0)
            }
            
            if(OLS[2,string] == "up" & LWarp != 1){
                WarpF = 1

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping up by: ",ColGrn,OLS[3,string]:toNumber())
                
                Dest = DriveEnt:pos() + vec(0,0,OLS[3,string]:toNumber())
            }
            
            if(OLS[2,string] == "down" & LWarp != 1){
                WarpF = 1

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping down by: ",ColGrn,OLS[3,string]:toNumber())
                
                Dest = DriveEnt:pos() - vec(0,0,OLS[3,string]:toNumber())
            }
            
            if(LWarp != 1){
                warp(Dest,AngleOffset)
            }
        }

    
        if(OLS[1,string] == WarpPrefix & WarpF == 0){
            hideChat(1)
            Ply = findPlayerByName(OLS[2,string])
            
            if(Ply:isPlayer()){
                WarpF = 1
                PlyCol = teamColor(Ply:team())

                local Dest = Ply:pos()
            
                warp(Dest,AngleOffset)

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to Player: ",teamColor(Ply:team()),Ply:name())
            }
            elseif(WarpLoc:exists(OLS[2,string])){
                WarpF = 1

                local Dest = round(WarpLoc[OLS[2,string],vector])
                
                warp(Dest,AngleOffset)

                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to location: ",ColGrn,OLS[2,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot warp to: ",ColRed,OLS[2,string])
            }
        }
    }
}

if(clk("warpdirreset")){
    WarpL = 0
}

if(clk("resetwarp")){
    Destination = vec()
    Drive[DestInput,vector] = vec()
    AngleOffset = ang()
    Warp = 0
    Drive[WarpInput,number] = 0
    WarpF = 0
}

if(clk("warp")){
    Warp = 1
    Drive[WarpInput,number] = 1
}

if(~Drive){
    if(->Drive){
        DriveEnt = Drive:entity()
        DriveOffset = DriveEnt:angles()
        DriveType = DriveEnt:type()
        
        if(DriveType == "ship_drive" | DriveType == "bsg_drive" | DriveType == "st_warp_drive" | DriveType == "sg_hyperdrive" | DriveType == "spore_drive" | DriveType == "quantum_slipstream_drive"){
            DestInput = "Destination"
            WarpInput = "Activate"
            AngInput = "Angle Offset"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"TSCM Drive ",ColGrn,"Linked.")
        }
        elseif(DriveType == "gmod_wire_hoverdrivecontroler" | DriveType == "gmod_wire_teleporter"){
            DestInput = "TargetPos"
            WarpInput = "Jump"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Wire Drive ",ColGrn,"Linked")
        }
        elseif(DriveType == "warpdrive"){ #SBEP Warp Drive
            DestInput = "Destination"
            WarpInput = "Warp"
            AngInput = ""
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"SBEPDrive ",ColGrn,"Linked")
        }
        elseif(DriveType == "st_shuttle_type11"){
            DestInput = "Transwarp Destination"
            WarpInput = "Transwarp"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Type 11 Shuttle ",ColGrn,"Linked")
        }
        elseif(DriveType == "st_shuttle_type9" | DriveType == "st_Shuttle_type6"){
            DestInput = "Warp Destination"
            WarpInput = "Engage Warp"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shuttle Linked")
        }
        elseif(DriveType == "sci_fi_shuttle"){
            DestInput = "FTL Co-ordinates"
            WarpInput = "FTL Jump"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Sci-fi Shuttle ",ColGrn,"Linked")
        }
        elseif(DriveType == "sent_tardis_interior" | DriveType == "sent_tardis"){
            DestInput = "XYZ"
            WarpInput = "Demat" 
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"TARDIS ",ColGrn,"Linked")
        }
        elseif(DriveType == "gmod_wire_expression2"){
            DestInput = "Destination"
            WarpInput = "Warp"
            AngInput = "Angle Offset"
        }
        elseif(->Destination & ->Warp){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Manual Drive ",ColGrn,"Linked")
        }
        elseif(->Drive){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unable to link to: ",ColRed,DriveType)
        }        
        else{
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive ",ColRed,"Unlinked")
        }
    }
}

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "wspeed"){
            if(OLS[3,string]:toNumber() < 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Invalid number specified. Current Warp Factor is: ",ColGrn,WarpFactor)
            }
            elseif(OLS[3,string]:toNumber() > 10){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warp Factor cannot go above ",ColGrn,"9.975",ColOng,". Setting Warp Factor to max.")
                WarpFactor = 10
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warp Factor changed to: ",ColGrn,OLS[3,string]:toNumber())
                WarpFactor = OLS[3,string]:toNumber()
            }
        }
    }    
}

################
###Drive Core###
################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "cspeed"){
            if(!DriveCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Drive Core not linked!")
            }
            else{
                if(OLS[3,string]:toNumber() < 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Drive Core Speed is: ",ColGrn,DCoreSpeed)
                }
                elseif(OLS[3,string]:toNumber() > 2){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Speed cannot go above ",ColGrn,"2",ColOng,". Setting Speed to max.")
                    DCoreSpeed = 2
                    DriveCore["Speed Multiplier",number] = 2
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Speed changed to: ",ColGrn,OLS[3,string]:toNumber())
                    DCoreSpeed = OLS[3,string]:toNumber()
                    DriveCore["Speed Multiplier",number] = OLS[3,string]:toNumber()
                }
            }
        }
    }
}


if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "ctspeed"){
            if(!DriveCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Drive Core not linked!")
            }
            else{
                if(OLS[3,string]:toNumber() < 0.5){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Drive core Turnspeed is: ",ColGrn,DCoreTurnSpeed)
                }
                elseif(OLS[3,string]:toNumber() > 2){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Turnspeed cannot go above ",ColGrn,"2",ColOng,". Setting Turnspeed to max.")
                    DCoreTurnSpeed = 2
                    DriveCore["Turn Rate Multiplier",number] = 2
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Turnspeed changed to: ",ColGrn,OLS[3,string]:toNumber())
                    DCoreTurnSpeed = OLS[3,string]:toNumber()
                    DriveCore["Turn Rate Multiplier",number] = OLS[3,string]:toNumber()
                }
            }
        }
    }    
}
################
###Calculator###
################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "calc"){
            if(OLS[3,string]:toNumber() == 0 | OLS[5,string]:toNumber() == 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"NaN or 0 Used as Input, Cannot Calculate.")
            }
            elseif(OLS[4,string] == "+"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ",ColGrn,OLS[3,string]:toNumber() + OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "-"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ",ColGrn,OLS[3,string]:toNumber() - OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "*" | OLS[4,string] == "x"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ",ColGrn,OLS[3,string]:toNumber() * OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "/"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ",ColGrn,OLS[3,string]:toNumber() / OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "^"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ",ColGrn,OLS[3,string]:toNumber() ^ OLS[5,string]:toNumber())
            }
        }
    }
}


###################
###Distress Call###
###################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "distress"){
            if(!ShipCore:entity():isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Ship Core not linked! Cannot send Distress Call!")
            }
            else{
                if(ShipCore:entity():parent():isValid()){
                    findIncludeEntity(ShipCore:entity():parent())
                }
                else{
                    findIncludeEntity(ShipCore:entity())
                }
                
                if(findInBox(vec(15839,15835,15834),vec(-15839,35,33)) == 1){ #Milkyway
                    DistressLocation = "Milkyway Space"
                }
                elseif(findInSphere(vec(0,8032,8064),4280) == 1){ #Earth
                    DistressLocation = "Earth"
                }
                elseif(findInSphere(vec(-4480,13792,9920),1550) == 1){ #Moon
                    DistressLocation = "Moon"
                }
                elseif(findInBox(vec(15837,-9,15839),vec(-15836,-15836,32)) == 1){ #Pegasus
                    DistressLocation = "Pegasus Space"
                }
                elseif(findInSphere(vec(-7552,-7056,6832),5160) == 1){ #Shakur
                    DistressLocation = "Shakuras"
                }
                elseif(findInBox(vec(7068,-11246,10079),vec(9769,-4816,9032)) == 1){ #Station
                    DistressLocation = "Station"
                }
                elseif(findInBox(vec(15835,15840,0),vec(-15840,-15838,-14012)) == 1){ #Universe
                    DistressLocation = "Universe Space"
                }
                elseif(findInSphere(vec(7168,8704,-6064),5015) == 1){ #Hiigara
                    DistressLocation = "Hiigara"
                }
                elseif(findInSphere(vec(10624,-10668,-9384),4112) == 1){ #Desert
                    DistressLocation = "Desert"
                }
                elseif(findInSphere(vec(-9792,-79,-4688),3122) == 1){ #Lava
                    DistressLocation = "Lava"
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You are in an unrecognized location. Cannot send Distress Call")
                }
                
                if(Shield:entity():type() == "atlantis_shield_emitter"){
                    ShieldCurEng = Shield["Current Energy",number]
                    ShieldMaxEng = Shield["Max Energy",number]
                }
                elseif(Shield:entity():type() == "st_shield_emitter"){
                    ShieldCurEng = Shield["Total Charge",number]
                    ShieldMaxEng = Shield["Max Charge",number]
                }
                
                SH = round(ShieldCurEng / ShieldMaxEng * 100)
                CP = round(ShipCore["Plating",number])
                HP = round(ShipCore["Health",number] / ShipCore["Max Health",number] * 100)
                
                botSayAlliance("AI"," [Vethian] ",ColPink,"Distress Call initated from: [" +Shipname+ "] Owned by: [" +owner():name()+ "]")
                timer("distresswait",2000)
            }
        }
    }
}

if(clk("distresswait")){ #Distress Info
    botSayAlliance("AI"," [Vethian] ",ColPink,"Distress Location: [" +DistressLocation+ "] Shields at: [" +SH+ "%] Plating at: [" +CP+ "%] Hull at: [" +HP+ "%]")
}


#################
###Transporter###
#################
if(chatClk(O)){
    if(OLS[1,string] == TPPrefix){
        hideChat(1)
        if(!Transporter:entity():isValid()){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Transporter not linked!")
        }
        else{
            if(OLS[2,string] == "help" | OLS[2,string] == "loc" | OLS[2,string] == "locations"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transport Locations:")
                #printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Earth, SGC, Moon, Shakur, Shakbase, Station, Hiigara, Hiibase, Desert, Pyramid, Pyramidbase, Lava, Lavabase, Hell, Space")
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,TransportLoc:keys():concat(", "))
            }
            
            if(OLS[2,string] == "beamup"){
                if(OLS[3,string]:length() == 0 | OLS[3,string] == "me"){
                    if(jamCheck(owner(),owner():pos(),1) == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming",ColTeam," You ",ColOng,"to the pad")
                        transport(owner(),vec(),"beamup")
                    }
                }
                
                if(OLS[3,string] == "this" | OLS[3,string] == "that"){
                    if(owner():aimEntity():isValid()){
                        if(owner():aimEntity():isPlayer()){
                            BeamName = owner():aimEntity():name()
                        }
                        else{
                            if(owner():aimEntity():getName() == ""){
                                BeamName = owner():aimEntity():type()
                            }
                            else{
                                BeamName = owner():aimEntity():getName()
                            }
                        }
                        
                        if(jamCheck(owner():aimEntity(),owner():aimEntity():pos(),1) == 0){
                            transport(owner():aimEntity(),vec(),"beamup")
                            
                            timer("testbeam",10)
                        }
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You're not aiming at anything.")
                    }
                }
                
                if(OLS[3,string]:length() > 0 & OLS[3,string] != "this" & OLS[3,string] != "that" & OLS[3,string] != "me"){
                    local Ply = findPlayerByName(OLS[3,string])
                    
                    if(Ply:isPlayer()){
                        if(jamCheck(Ply,Ply:pos(),1) == 0){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(Ply:team()),Ply:name()," to the pad")
                                    
                            transport(Ply,vec(),"beamup")
                        }
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name: ",ColRed,OLS[3,string])
                    }
                }
            }
            
            if(OLS[2,string] == "beamdown"){
                if(OLS[3,string]:length() == 0 | OLS[3,string] == "me"){
                    if(jamCheck(owner(),owner():pos(),1) == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming down to",ColTeam," You")
                        transport(noentity(),owner():pos(),"beamdown")
                    }
                }
                
                if(OLS[3,string] == "core"){
                    if(OLS[4,string]:length() == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You need to put a player's core to target.")
                    }
                    else{
                        local Ply = findPlayerByName(OLS[4,string])
                        
                        if(Ply:isPlayer()){
                            findByClass("ship_core")
                            findClipToPlayerProps(Ply)
                                
                            local Core = find()
                                
                            if(Core:isValid()){
                                if(jamCheck(Core,Core:pos(),1) == 0){
                                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming to ",teamColor(Ply:team()),Ply:name(),"'s ",ColGrn,"Ship Core")
                                    transport(noentity(),Core:pos()+vec(100,0,0),"beamdown")
                                }
                            }
                            else{
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",teamColor(Ply:team()),Ply:name(),ColOng," does not have a ",ColRed,"Ship Core!")
                            }
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[4,string])
                        }
                    }
                }
                
                if(OLS[3,string] == "pad"){
                    if(OLS[4,string]:length() == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You need to put a player's pad to target.")
                    }
                    else{
                        local Ply = findPlayerByName(OLS[4,string])
                        
                        if(Ply:isPlayer()){
                            findByClass("transporter_pad")
                            findClipToPlayerProps(Ply)
                                
                            local Pad = find()
                                
                            if(Pad:isValid()){
                                if(jamCheck(Pad,Pad:pos(),1) == 0){
                                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming to ",teamColor(Ply:team()),Ply:name(),"'s ",ColGrn,"Transporter Pad")
                                    transport(noentity(),Pad:pos()+vec(0,0,10),"beamdown")
                                }
                            }
                            else{
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",teamColor(Ply:team()),Ply:name(),ColOng," does not have a ",ColRed,"Transporter Pad!")
                            }
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[4,string])
                        }
                    }
                }
                
                if(OLS[3,string]:length() > 0 & OLS[3,string] != "me" & OLS[3,string] != "core" & OLS[3,string] != "pad"){
                    local Ply = findPlayerByName(OLS[3,string])
                    
                    if(Ply:isValid()){
                        if(jamCheck(Ply,Ply:pos(),1) == 0){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming down to ",teamColor(Ply:team()),Ply:name())
                            transport(noentity(),Ply:pos(),"beamdown")
                        }
                    }
                    elseif(TransportLoc:exists(OLS[3,string])){
                        if(jamCheck(Ply,Ply:pos(),0) == 0 & jamCheck(noentity(),TransportLoc[OLS[3,string],vector],0) == 0){
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming down to ",ColGrn,OLS[3,string])
                            transport(noentity(),TransportLoc[OLS[3,string],vector],"beamdown")
                        }
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player or location with the name ",ColRed,OLS[3,string])
                    }
                }
            }
            
            if(OLS[2,string] == "beam"){
                if(OLS[3,string] == "me"){
                    BeamFrom = owner()
                    BeamName = "You"
                }
                
                if(findPlayerByName(OLS[3,string]):isPlayer() & OLS[3,string] != "me"){
                    BeamFrom = findPlayerByName(OLS[3,string])
                    BeamName = findPlayerByName(OLS[3,string]):name()
                }
                
                if(OLS[4,string]:length() == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"Cannot beam nowhere")
                }
                
                if(findPlayerByName(OLS[4,string]):isPlayer()){
                    BeamTo = findPlayerByName(OLS[4,string])
                    
                    if(jamCheck(BeamFrom,BeamFrom:pos(),0) == 0 & jamCheck(BeamTo,BeamTo:pos(),0) == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName," to ",teamColor(BeamTo:team()),BeamTo:name())
                        
                        transport(BeamFrom,BeamTo:pos()+vec(100,0,0),"vector")
                    }
                }
                
                if(OLS[4,string] == "core"){
                    if(OLS[5,string]:length() == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You need to put a player's core to target.")
                    }
                    else{
                        local Ply = findPlayerByName(OLS[5,string])
                        
                        if(Ply:isPlayer()){
                            findByClass("ship_core")
                            findClipToPlayerProps(Ply)
                                
                            local Core = find()
                                
                            if(Core:isValid()){
                                if(jamCheck(Core,Core:pos(),1) == 0){
                                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName,ColOng," to ",teamColor(Ply:team()),Ply:name(),"'s ",ColGrn,"Ship Core")
                                    transport(BeamFrom,Core:pos()+vec(100,0,0),"vector")
                                }
                            }
                            else{
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",teamColor(Ply:team()),Ply:name(),ColOng," does not have a ",ColRed,"Ship Core!")
                            }
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[5,string])
                        }
                    }
                }
                
                if(OLS[4,string] == "pad"){
                    if(OLS[5,string]:length() == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColRed,"You need to put a player's pad to target.")
                    }
                    else{
                        local Ply = findPlayerByName(OLS[5,string])
                        
                        if(Ply:isPlayer()){
                            findByClass("transporter_pad")
                            findClipToPlayerProps(Ply)
                                
                            local Pad = find()
                                
                            if(Pad:isValid()){
                                if(jamCheck(Pad,Pad:pos(),1) == 0){
                                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName,ColOng," to ",teamColor(Ply:team()),Ply:name(),"'s ",ColGrn,"Transporter Pad")
                                    transport(BeamFrom,Pad:pos()+vec(0,0,10),"vector")
                                }
                            }
                            else{
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",teamColor(Ply:team()),Ply:name(),ColOng," does not have a ",ColRed,"Transporter Pad!")
                            }
                        }
                        else{
                            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[4,string])
                        }
                    }
                }
                
                if(OLS[4,string] == "brig" | OLS[4,string] == "jail" | OLS[4,string] == "babyjail"){
                    local Ply = findPlayerByName(OLS[3,string])
                    
                    if(Ply:isPlayer()){
                        if(jamCheck(BeamFrom,BeamFrom:pos(),0) == 0 & jamCheck(BrigEnt,BrigEnt:pos(),0) == 0){
                            transport(BeamFrom,BrigEnt:pos()+vec(0,0,-50),"vector")
                            
                            if(OLS[4,string] == "brig"){
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName,ColOng," to the brig")
                            }
                            if(OLS[4,string] == "jail"){
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName,ColOng," to the jail")
                            }   
                            if(OLS[4,string] == "babyjail"){
                                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName,ColOng," to the ",vec(255,0,0),"g",vec(255,139,0),"a",vec(232,255,0),"y ",vec(93,255,0),"b",vec(0,255,46),"a",vec(0,255,185),"b",vec(0,185,255),"y ",vec(0,46,255),"j",vec(93,0,255),"a",vec(232,0,255),"i",vec(255,0,139),"l")
                            }
                        }
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"There is no player with the name ",ColRed,OLS[3,string])
                    }
                }
                
                if(TransportLoc:exists(OLS[4,string])){
                    if(jamCheck(BeamFrom,BeamFrom:pos(),0) == 0 & jamCheck(noentity(),TransportLoc[OLS[4,string],vector],0) == 0){
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(BeamFrom:team()),BeamName," to ",ColGrn,OLS[4,string])
                        transport(BeamFrom,TransportLoc[OLS[4,string],vector],"vector")
                    }
                }
            }
        }
    }
}

if(clk("testbeam")){
    if(Transporter:entity():type() == "transporter_pad"){
        if(Transporter["Energising",number] == 0){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot beam that ",ColRed,BeamName,ColOng," to the pad. It is likely too large.")
        }
        else{
            if(AimET:isPlayer()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(owner():aimEntity():team()),BeamName,ColOng," to the pad.")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming that ",ColGrn,BeamName,ColOng," to the pad.")
            }
        }
    }
    
    if(Transporter:entity():type() == "asgard_transporter"){
        if(Transporter["Transporting",number] == 0){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot beam that ",ColRed,BeamName,ColOng," to the transporter. It is likely too large.")
        }
        else{
            if(AimET:isPlayer()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming ",teamColor(owner():aimEntity():team()),BeamName,ColOng," to the transporter.")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming that ",ColGrn,BeamName,ColOng," to the transporter.")
            }
        }
    }
}

if(clk("beam")){
    Transporter[PadBeam,number] = 1
}

if(clk("resetbeam")){
    Transporter[PadTarget,entity] = noentity()
    Transporter[PadDest,vector] = vec()
    Transporter[PadBeam,number] = 0
}
