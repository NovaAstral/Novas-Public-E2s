@name Vethian AI 1.8

@inputs [Energy,Refinery,LS,WCore,Core,Shield,Cloak,Gate,Rings,DriveCore,Drive,Transporter]:wirelink [DriveEnt,BrigEnt]:entity

@outputs Active WarpFactor Tractor Lockdown Alert:string AlertCol:vector AlertLightBrightness SDTimeLeft SDActive DistressCall DistressLocation:string Jam
@outputs GateFF GateRFF BridgeFF TransFF EngFF CoreFF ##Forcefields
@outputs HangarDoor HangarDoorLeft HangarDoorRight Shutters BlastDoors BridgeDoor GateRDoor EngDoor TransDoor ##Doors
@outputs Fire WepStrength WepRate BeamWepType TorpWepType TurretWepType ##Weapon Control
@outputs Warp [Destination,PrevPos]:vector AngleOffset:angle ##Warp Control

@persist [WaterCW,AimEFW,AimEW]:wirelink [WaterCE,AimEF,AimE]:entity [Shipname,DistressLocation]:string
@persist GateCol SDTimeLeft DCoreSpeed DCoreTurnSpeed AutoDistress WPlaced Jam PrintOnSpawn [OpenInput TOpenInput LockInput]:string DoorFound
@persist SH CP HP [Prefix,WarpPrefix]:string
@persist [PrevPos]:vector [WarpAng,PrevAng,DriveOffset]:angle DriveEnt:entity [WarpInput,AngInput,DestInput]:string
@persist [PadTarget,PadDest,PadBeam,TransBeamType]:string BrigName:array

#Made by Nova Astral
#Discord: Nova Astral#2079
#Steam: http://steamcommunity.com/profiles/76561198068127098
#Github: https://github.com/NovaAstral/Novas-Public-E2s/blob/main/Mainframes/vethian.txt


#This is the docs on command usage
#https://docs.google.com/document/d/1O2u7H4LFrC73PP-RpSY7yRGR4XEydbntwioRyLWV7Gk/


#If you want to make a suggestion/bug report,
#either use The Spartan Alliance discord channel for Vethian, or the github issues page


#Todo:
#E:addCoreTarget("string")
#Merge Iris Computer?
#Merge Gate Functions
#Make and Merge Transporter control
#Make and Merge Targetting
#Make screens
#Full Weapons control
#Warnings for if you try to use a command but the thing isn't linked
#Change Distress find to normal find and incorporate that into both new distress and player/ship find
#Remove all wire inputs by using autofind
#[

findbyclass sbep_door_controller

V1.8 Changes:
- Added a directional warp command: eg "/v warp forward 158" or "/v warp back 1742" etc
- Added a 'brig' transport command: eg "/v brig <player>" or </v jail <player>"
- Changed asay/fsay so the playername is more easily visible since the botSay function is limited
- Added a BlastDoors wire output, controlled with '/v blast' or '/v bulk'
]#

#include "Novas-Public-E2s/library/nova_lib"

runOnChat(1)

O = owner()
OLS = owner():lastSaid():lower():explode(" ")

if(first() | dupefinished()){
    Active = 1 #This is just an active output to link things to
    WarpFactor = 10 #This is the starting warp factor
    Shutters = 1 #This opens the shutters when the mainframe is spawned
    
    GateCol = 1 #Set this to 0 if you don't want your gate event horizon to change colors on alert

    PrintOnSpawn = 1 #Set this to 0 to stop printing to faction on e2 spawn

    Shipname = "Shipname" #Change this to the name of your ship
    LS["Name",string] = Shipname

    #AutoDistress = 1 #Disable this if you don't want your ship to send a distress call at 30% hull
    #This isn't implemented yet
    
    Prefix = "/v" #Set this to the prefix you need to enter first in chat for any commands
    WarpPrefix = "/warp" #This is the Warp Prefix for using the warp drive
    
    WepStrength = 10 #I would set these lower if you dont have alot of resources
    WepRate = 10

    timer("spawnprint",1000)
    
    AlertGreen = vec(0) #Alert colors for the lights
    AlertBlue = vec(0,0,255)
    AlertRed = vec(255,0,0)
    AlertBlack = vec(255)
}

if(clk("spawnprint")){
    if(PrintOnSpawn == 1){
        if(Shipname != "Shipname"){
            botSay("AI"," [Vethian] ",ColPink,"Vethian AI v1.8 active from: <" +owner():name()+ "> on ship: <" +Shipname+ ">")
        }
        else{
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship name not set. Set it on",ColRed," [Line 69] ",ColOng,"of the mainframe.")
        }
    }
}

#################
####Stargazer####
#################


if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "power"){
            if(Energy["Active",number] == 0){
                Energy["Activate",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Energy Generation Online.")
            }
            else{
                Energy["Activate",number] = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Energy Generation Offline.")
            }
        }
        
        if(OLS[2,string] == "refine"){
            if(Refinery["Active",number] == 0){
                Refinery["Activate",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Refinery Online.")
            }
            else{
                Refinery["Activate",number] = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Refinery Offline.")
            }
        }

        if(OLS[2,string] == "ls"){
            if(LS["Active",number] == 0){
                LS["Activate",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Life Support Online.")
            }
            else{
                LS["Activate",number] = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Life Support Offline.")
            }
        }

        if(OLS[2,string] == "noclip"){
            if(OLS[3,string] == "on"){
                LS["Disable Noclip",number] = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Anti-Noclip Disabled.")
            }
            if(OLS[3,string] == "off"){
                LS["Disable Noclip",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Anti-Noclip Enabled.")
            }
            if(OLS[3,string] == "fac"){
                LS["Disable Noclip",number] = 2
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Faction only noclip Enabled.")
            }
            if(OLS[3,string] == "ally"){
                LS["Disable Noclip",number] = 3
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Alliance only noclip Enabled.")
            }
        }
    
        if(OLS[2,string] == "mute"){
            LS["Mute",number] = 1
            Energy["Mute",number] = 1
            Refinery["Mute",number] = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cores Muted.")
        }
        if(OLS[2,string] == "unmute"){
            LS["Mute",number] = 0
            Energy["Mute",number] = 0
            Refinery["Mute",number] = 0
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cores Unmuted.")
        }

        if(OLS[2,string] == "water"){
            WaterCW = WCore["Collector",entity]:wirelink()
            WaterCE = WCore["Collector",entity]
            timer("collect",100)
        }

        if(OLS[2,string] == "wplace"){
            WCore["Spawn Collector",number] = 1
            timer("placeclct",100)
            timer("setclct",10)
        }
    }
}

if(clk("collect")){
    if(WaterCE:isValid()){
        if(WaterCW["Active",number] == 0){
            WaterCW["Activate",number] = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector Online.")
        }
        else{
            WaterCW["Activate",number] = 0
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector Offline.")
        }
    }
    else{
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Core not linked or collector not placed. Cannot collect water.")
    }
}

if(clk("setclct")){
    WaterCW = WCore["Collector",entity]:wirelink()
    WaterCE = WCore["Collector",entity]
}

if(clk("placeclct")){
    if(entity():parent():isValid()){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot place water collector. The ship is parented.")
    }
    else{
        WaterCE:propFreeze(1)
        findIncludeEntity(WCore:entity())
    
        if(findInBox(vec(15837,-9,15839),vec(-15836,-15836,32)) == 1){ #pegasus
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: Shakuras")
            WaterCE:setPos(vec(-6818,-7200,6730))
            WPlaced = 1
        }
    
        if(findInBox(vec(15839,15835,15834),vec(-15839,35,33)) == 1){ #milkyway
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: Earth")
            WaterCE:setPos(vec(-1260,7982,7942))
            WPlaced = 1
        }
    
        if(findInBox(vec(15831,-15835,0),vec(-15837,-2269,-14015)) == 1){ #desert
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: Desert")
            WaterCE:setPos(vec(11350,-9220,-9360))
            WPlaced = 1
        }
    
        if(findInBox(vec(-15837,-2269,-14015),vec(15837,15838,0)) == 1){ #hiigara
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Water Collector placed on: Hiigara")
            WaterCE:setPos(vec(5654,6201,-6194))
            WPlaced = 1
        }
    
        elseif(WPlaced == 0){ #This only triggers if you're in build/members/admin, or if your ship is parented
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot place water collector here.")
        }
        
        WPlaced = 0
    }
}


####################
####Core Systems####
####################

if(chatClk(O)){ #Yes I know I don't need to do this every time, but it feels better to me
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "plating"){
            if(Core["Plating Enabled",number] == 0){
                Core["Enable Plating",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Plating Generation Enabled.")
                }
                else{
                    Core["Enable Plating",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Plating Generation Disabled.")
                }
            }
            
            if(OLS[2,string] == "fire"){
                if(OLS[3,string] == "on"){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Firing Weapons")
                    Fire = 1
                }
                if(OLS[3,string] == "off"){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapons Offline")
                    Fire = 0
                }
            }
            
            if(OLS[2,string] == "emitters"){
                if(Core["Emitters Enabled",number] == 0){
                    Core["Enable Emitters",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Pulsar Emitters Online.")
                }
                else{
                    Core["Enable Emitters",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Pulsar Emitters Offline.")
                }
            }

            if(OLS[2,string] == "repair"){
                if(OLS[3,string] == "on"){
                    Core["Fire Repair Beam",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Firing Repair Beam.")
                }
                if(OLS[3,string] == "off"){
                    Core["Fire Repair Beam",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Repair Beam Disabled.")
                }
            }

            if(OLS[2,string] == "tr"){
                if(OLS[3,string] == "on"){
                    Tractor = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Tractor Beam Enabled.")
                }
                if(OLS[3,string] == "off"){
                    Tractor = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Tractor Beam Disabled.")
                }
            }
            
            if(OLS[2,string] == "shield"){
                if(Shield["Active",number] == 0){
                    Shield["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shield Activated.")
                }
                else{
                    Shield["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shield Deactivated.")
                }
            }
            
            if(OLS[2,string] == "cloak"){
                if(Cloak["Active",number] == 0){
                Cloak["Activate",number] = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cloak Activated.")
            }
            else{
                Cloak["Activate",number] = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cloak Deactivated.")
            }
        }

        if(OLS[2,string] == "startup"){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Activating ship systems. Turning on Plating generation, Life Support, and Power.")
            Core["Enable Plating",number] = 1
            LS["Activate",number] = 1
            Energy["Activate",number] = 1
        }
    
        if(OLS[2,string] == "sd"){
            if(OLS[3,string] == "this"){
                AimE = owner():aimEntity()
                if(AimE:isValid()){
                    AimEW = owner():aimEntity():wirelink()
                    if(AimEW:hasInput("Self Destruct")){
                        AimEW["Self Destruct",number] = 1
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destructing aimed Ship Core.")
                    }
                    else{
                        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aimed entity does not have a Self Destruct input.")
                    }
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
                }
            }

        
            if(OLS[3,string] == "stop"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aborting Self Destruct.")
                Core:entity():stopCoreEnvironmentSound()
                stoptimer("sdtime")
                SDTimeLeft = 0
                SDActive = 0
            }
            
            if(OLS[3,string]:length() <= 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"No time specified. Activating Destruction.")
                Core["Self Destruct",number] = 1
                SDActive = 1
            }
            
            elseif(OLS[3,string] != "stop" & OLS[3,string] != "this"){
                if(OLS[3,string]:toNumber() == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid time.")
                }
                else{
                    SDTimeLeft = OLS[3,string]:toNumber()
                    SDActive = 1
                    Core:entity():setCoreEnvironmentSound("alarm/sga_midway_selfdestruct.wav",1,100)
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct activated for <"+ SDTimeLeft + "> seconds.")
                    timer("sdtime",10)
                }
            }
        }
    }
}

if(clk("sdtime")){
    timer("sdtime",1000)
    SDTimeLeft--
    
    if(SDTimeLeft == 0){
        Core["Self Destruct",number] = 1
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship Destruct")
    }
    
    if(SDTimeLeft == 10){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct in 10 seconds.")
    }
    
    if(SDTimeLeft == 30){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct in 30 seconds.")
}

    if(SDTimeLeft == 60){
        printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Self Destruct in 60 seconds.")
    }
}

##############  
####Alarms####
##############

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "green"){
            Core:entity():setCoreEnvironmentSound("st/shuttlecraft/computer_work2.mp3",0.4,100)
            Core:entity():stopCoreEnvironmentSound()
            Alert = "Green"
            AlertCol = AlertGreen
            stoptimer("alighton")
            stoptimer("alightoff")
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition Green. Stand Down.")

            if(GateCol == 1){
                Gate["Event Horizon Color",vector] = vec(0,0,0)
            }
        }

        if(OLS[2,string] == "blue"){
            Core:entity():setCoreEnvironmentSound("st/misc/bluealert.wav",0.4,100)
            Alert = "Blue"
            AlertCol = AlertBlue
            timer("alighton",1)
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition Blue. Prepare for Battle.")
            
            if(GateCol == 1){
                Gate["Event Horizon Color",vector] = vec(0,0,255)
            }
        }

        if(OLS[2,string] == "red"){
            Core:entity():setCoreEnvironmentSound("st/misc/voy_redalert_loop.wav",0.4,100)
            Alert = "Red"
            AlertCol = AlertRed
            timer("alighton",1)
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition Red. Battle Stations.")
            
            if(GateCol == 1){
                Gate["Event Horizon Color",vector] = vec(255,0,0)
            }
        }

        if(OLS[2,string] == "black"){
            Core:entity():setCoreEnvironmentSound("st/misc/dsc_black_alert_short.wav",0.4,100)
            Alert = "Black"
            AlertCol = AlertBlack
            timer("alighton",1)

            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Condition Black. Shipwide Experiment.")
            
            if(GateCol == 1){
                Gate["Event Horizon Color",vector] = vec(50,50,50)
            }
        }

        if(OLS[2,string] == "abandon"){
            Core:entity():setCoreEnvironmentSound("st/misc/abandon_ship.wav",0.4,100)
            Alert = "Abandon Ship"
            AlertCol = AlertRed
            timer("alighton",1)
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Abandon Ship.")

            if(GateCol == 1){
                Gate["Event Horizon Color",vector] = vec(200,0,0)
            }
        }

        if(OLS[2,string] == "ldon"){
            Core:entity():setCoreEnvironmentSound("st/misc/rom_redalert.wav",0.4,100)
            BridgeDoor = 1
            BridgeFF = 1
            GateFF = 1
            GateRDoor = 1
            GateRFF = 1
            TransDoor = 1
            TransFF = 1
            EngDoor = 1
            EngFF = 1
            Lockdown = 1
            HangarDoor = 0
            HangarDoorLeft = 0
            HangarDoorRight = 0
            Shutters = 0
            Rings["UnUsable",number] = 1
            Shield["Activate",number] = 1
            LS["Disable Noclip",number] = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship Lockdown Activated")
        }

        if(OLS[2,string] == "ldoff"){
            Core:entity():setCoreEnvironmentSound("st/shuttlecraft/computer_work2.mp3",0.4,100)
            Core:entity():stopCoreEnvironmentSound()
            BridgeFF = 0
            GateFF = 0
            GateRFF = 0
            TransFF = 0
            EngFF = 0
            Lockdown = 0
            Rings["UnUsable",number] = 0
            LS["Disable Noclip",number] = 0
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Ship Lockdown Deactivated")
        }
    }
}

if(clk("alighton")){
    AlertLightBrightness = 5
    timer("alightoff",1000)
}

if(clk("alightoff")){
    AlertLightBrightness = 0
    timer("alighton",1000)
}

#########################
####Doors/Forcefields####
#########################
if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "bridge" | OLS[2,string] == "br"){1
            BridgeDoor = !BridgeDoor
            if(BridgeDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Door Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Door Closed")
            }
        }
        if(OLS[2,string] == "bridgeff" | OLS[2,string] == "brff"){
            BridgeFF = !BridgeFF
            if(BridgeFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Forcefield Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Forcefield Deactivated")
            }
        }
        
        if(OLS[2,string] == "gateroom" | OLS[2,string] == "gr"){
            GateRDoor = !GateRDoor
            if(BridgeDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Door Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Bridge Door Closed")
            }
        }
        if(OLS[2,string] == "gateroomff" | OLS[2,string] == "grff"){
            GateRFF = !GateRFF
            if(GateRFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gateroom Forcefield Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gateroom Forcefield Deactivated")
            }
        }
        if(OLS[2,string] == "gateff"){
            GateFF = !GateFF
            if(GateFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gate Forcefield Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gate Forcefield Deactivated")
            }
        }
        
        if(OLS[2,string] == "trans" | OLS[2,string] == "transporter"){
            TransDoor = !TransDoor
            if(TransDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Door Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Door Closed")
            }
        }
        if(OLS[2,string] == "transff"){
            TransFF = !TransFF
            if(TransFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Forcefield Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Transporter Room Forcefield Deactivated")
            }
        }
        
        if(OLS[2,string] == "eng" | OLS[2,string] == "engineering"){
            EngDoor = !EngDoor
            if(EngDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Door Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Door Closed")
            }
        }
        if(OLS[2,string] == "engff" | OLS[2,string] == "engineeringff"){
            EngFF = !EngFF
            if(EngFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Forcefield Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Engineering Forcefield Deactivated")
            }
        }
        
        if(OLS[2,string] == "coreff"){
            CoreFF = !CoreFF
            if(CoreFF == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Core Forcefield Activated")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Core Forcefield Deactivated")
            }
        }
        
        if(OLS[2,string] == "lh" | OLS[2,string] == "lhangar" | OLS[2,string] == "lefthangar"){
            HangarDoorLeft = !HangarDoorLeft
            if(HangarDoorLeft == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Left Hangar Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Left Hangar Closed")
            }
        }
        
        if(OLS[2,string] == "rh" | OLS[2,string] == "rhangar" | OLS[2,string] == "righthangar"){
            HangarDoorRight = !HangarDoorRight
            if(HangarDoorRight == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Right Hangar Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Right Hangar Closed")
            }
        }
        
        if(OLS[2,string] == "h" | OLS[2,string] == "hang" | OLS[2,string] == "hangar"){
            HangarDoor = !HangarDoor
            if(HangarDoor == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Hangar Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Hangar Closed")
            }
        }
        
        if(OLS[2,string] == "shut" | OLS[2,string] == "shutters"){
            Shutters = !Shutters
            if(Shutters == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shutters Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shutters Closed")
            }
        }
        
        if(OLS[2,string] == "bulk" | OLS[2,string] == "blast"){
            BlastDoors = !BlastDoors
            if(BlastDoors == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Blast Doors Opened")
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Blast Doors Closed")
            }
        }
    }
}

############
####Misc####
############

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "sugged"){
            botSayAlliance(owner():name(),"Vethian",ColPink,"sugged xd")
        }
        
        if(OLS[2,string] == "asay"){
            botSayAlliance("Vethian",owner():name(),ColPink,owner():lastSaid():sub(6+Prefix:length()))
        }
        
        if(OLS[2,string] == "fsay"){
            botSay("Vethian",owner():name(),ColPink,owner():lastSaid():sub(6+Prefix:length()))
        }
        
        if(OLS[2,string] == "o'neill"){
            timer("whacko",1) # :)
        }

#[      
        #ship/player location  THIS DOESNT WORK BECAUSE E2 HAS NO STARGAZER FUNCTIONS DAMNIT
        if(OLS[2,string] == "sloc"){
            Env = Core:getEnvironmentData()
            printColor(ColTeam,"[AI]",ColPink," [Vethian]",ColOng,"The ship is located at: " +Env)
        }
]#

        if(OLS[2,string] == "reset"){
            reset()
        }

        if(OLS[2,string] == "help"){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Vethian Help can be found at:")
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"https://docs.google.com/document/d/1O2u7H4LFrC73PP-RpSY7yRGR4XEydbntwioRyLWV7Gk")
        }
        
        if(OLS[2,string] == "taim"){
            AimEF = owner():aimEntity()
            if(AimEF:isValid()){
                AimEFW = owner():aimEntity():wirelink()
                if(AimEFW:hasInput("Fire")){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Selecting aimed entity as testfire weapon")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aimed entity does not have a Fire input.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
            }
        }
        
        if(OLS[2,string] == "tfire"){
            if(AimEF:isValid()){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Testfiring weapon")
                AimEFW["Fire",number] = 1
                timer("unaim",2500)
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You have not selected anything to fire.")
            }
        }
        
        if(OLS[2,string] == "disable"){
            AimE = owner():aimEntity()
            if(AimE:isValid()){
                AimEW = owner():aimEntity():wirelink()
                if(AimEW:hasInput("Disable")){
                    AimEW["Disable",number] = 1
                    timer("unaim",5000)
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Disabling Aimed Entity for 5 seconds.")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aimed entity does not have a Disable input.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
            }
        }
        
        if(OLS[2,string] == "activate" | OLS[2,string] == "work"){
            AimE = owner():aimEntity()
            if(AimE:isValid()){
                AimEW = owner():aimEntity():wirelink()
                if(AimEW:hasInput("Activate")){
                    AimEW["Activate",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Activating aimed entity.")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aimed entity does not have an Activate input.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
            }
        }
        
        if(OLS[2,string] == "deactivate" | OLS[2,string] == "workn't"){
            AimE = owner():aimEntity()
            if(AimE:isValid()){
                AimEW = owner():aimEntity():wirelink()
                if(AimEW:hasInput("Activate")){
                    AimEW["Activate",number] = 0
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Deactivating aimed entity.")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aimed entity does not have an Activate input.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
            }
        }
        
        if(OLS[2,string] == "open" | OLS[2,string] == "close" | OLS[2,string] == "lock" | OLS[2,string] == "unlock"){
            AimE = owner():aimEntity()
            if(AimE:isValid()){
                AimEW = owner():aimEntity():wirelink()
                
                if(AimE:type() == "sbep_base_door_controller"){
                    DoorFound = 1
                    DoorFrame = AimEW
                    if(OLS[3,string]:length() == 0){
                        OpenInput = "Open_1"
                        LockInput = "Lock_1"
                    }
                    else{
                        OpenInput = "Open_"+OLS[3,string]
                        LockInput = "Lock_"+OLS[3,string]
                    }
                }
                if(AimE:type() == "sbep_base_door"){
                    DoorFound = 1
                    DoorFrame = AimE:parent():wirelink()
                    
                    if(OLS[3,string]:length() == 0){
                        OpenInput = "Open_1"
                        LockInput = "Lock_1"
                    }
                    else{
                        OpenInput = "Open_"+OLS[3,string]
                        LockInput = "Lock_"+OLS[3,string]
                    }
                }
                if(AimE:type() == "cap_doors_frame"){
                    DoorFound = 1
                    DoorFrame = AimEW
                    TOpenInput = "Toggle"
                    LockInput = "Lockdown"
                    timer("ToggleDoorReset",1)
                }
                if(AimE:type() == "cap_doors"){
                    DoorFound = 1
                    DoorFrame = AimE:parent():wirelink()
                    TOpenInput = "Toggle"
                    LockInput = "Lockdown"
                }
                if(AimE:type() == "sci_fi_door"){
                    DoorFound = 1
                    DoorFrame = AimEW
                    OpenInput = "Open"
                    LockInput = "Lock"
                }
                if(AimE:type() == "sci_fi_door_anim"){
                    DoorFound = 1
                    DoorFrame = AimE:parent():wirelink()
                    OpenInput = "Open"
                    LockInput = "Lock"
                }
                if(DoorFound == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Aimed entity is not a door or is not supported.")
                }
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You're not aiming at anything.")
            }
            
            if(OLS[2,string] == "open"){                
                if(DoorFound == 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Opening Aimed Door.")
                    DoorFound = 0
                    DoorFrame[OpenInput,number] = 1
                    DoorFrame[TOpenInput,number] = 1
                    timer("ToggleDoorReset",10)
                }
            }
            if(OLS[2,string] == "close"){
                if(DoorFound == 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Closing Aimed Door")
                    DoorFound = 0
                    DoorFrame[OpenInput,number] = 0
                    DoorFrame[TOpenInput,number] = 1
                    timer("ToggleDoorReset",100)
                }
            }
            if(OLS[2,string] == "lock"){
                if(DoorFound == 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Locking Aimed Door")
                    DoorFound = 0
                    DoorFrame[LockInput,number] = 1
                }
            }
            if(OLS[2,string] == "unlock"){
                if(DoorFound == 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unlocking Aimed Door")
                    DoorFound = 0
                    DoorFrame[LockInput,number] = 0
                }
            }
        }        
    }
}

if(clk("ToggleDoorReset")){
    AimEW[TOpenInput,number] = 0
}

if(clk("unaim")){
    AimEFW["Fire",number] = 0
    AimEW["Disable",number] = 0
}


######################
####Gate/Rings/Jam####
######################
if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "closeg"){
            Gate:stargateClose()
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Closing Gate.")
        }
        if(OLS[2,string] == "dial"){
            if(OLS[4,string]:length() > 7 && Gate:stargateLocal() == 1){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot dial outside of local group.")
            }
            else{
                Gate["Dial Mode",number] = OLS[3,string]:toNumber()
                Gate["Dial String",string] = OLS[4,string]
                
                if(OLS[3,string]:length() > 1){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dial Mode cannot be a string")
                    timer("dialreset",100)
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dialing the gate to: "+OLS[4,string])
                    timer("gdial",100)
                }
            }
        }
        
        if(OLS[2,string] == "gsend"){
            if(Gate["Active",number] == 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Gate is offline, cannot send a message.")
            }
            else{
                Gate:stargateTransmit(owner():lastSaid():sub(7+Prefix:length()))
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Message sent through gate: "+owner():lastSaid():sub(7+Prefix:length()))
            }
        }
    }
}


if(clk("gdial")){
    Gate["Start String Dial",number] = 1
    timer("dialreset",2000)
}

if(clk("dialreset")){
    Gate["Dial Mode",number] = 0
    Gate["Dial String",string] = ""
    Gate["Start String Dial",number] = 0
}

###Rings###

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "rdial"){
            if(OLS[3,string]:length() == 0){
                if(Rings["Usable",number] == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Rings Disabled, Cannot dial.")
                }
                else{
                    Rings["Dial Closest",number] = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dialing closest rings.")
                    timer("ringreset",100)
                }
            }
        
            if(OLS[3,string]:length() > 0){
                if(Rings["Usable",number] == 0){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Rings Disabled, Cannot dial.")
                }
                else{
                    Rings["Dial Address",string] = OLS[3,string]
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Dialing Rings to: "+ OLS[3,string])
                    timer("ringreset",100)
                }
            }
        }
            
        if(OLS[2,string] == "roff"){
            Rings["UnUsable",number] = 1
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Rings Disabled")
        }
            
        if(OLS[2,string] == "ron"){
            Rings["UnUsable",number] = 0
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Rings Enabled")
        }
    }
}


if(clk("ringreset")){
    Rings["Dial Address",string] = ""
    Rings["Dial Closest",number] = 0
}


###Jammer Control###

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "jam"){
            if(Jam == 0){
                Jam = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Jammer Online")
            }
            elseif(Jam == 1){
                Jam = 0
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Jammer Offline")
            }
        }
    }
}

####################
###Weapon Control###
####################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "wstrength"){
            if(OLS[3,string]:toNumber() < 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Weapon Strength is: "+WepStrength)
            }
            elseif(OLS[3,string]:toNumber() > 10){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Strength cannot go above 10. Setting Weapon Strength to max.")
                WepStrength = 10
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Strength changed to: "+OLS[3,string]:toNumber())
                WepStrength = OLS[3,string]:toNumber()
            }
        }
        
        if(OLS[2,string] == "wrate"){
            if(OLS[3,string]:toNumber() < 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Weapon Rate is: "+WepStrength)
            }
            elseif(OLS[3,string]:toNumber() > 10){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Rate cannot go above 10. Setting Weapon Rate to max.")
                WepRate = 10
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Weapon Rate changed to: "+OLS[3,string]:toNumber())
                WepRate = OLS[3,string]:toNumber()
            }
        }
    
        if(OLS[2,string] == "btype"){
            if(BeamType:exists(OLS[3,string])){
                BeamWepType = BeamType[OLS[3,string],number]
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beam Weapon Type changed to: "+OLS[3,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unrecognized Beam Weapon Type: "+OLS[3,string])
            }
        }
        
        if(OLS[2,string] == "ttype"){
            if(TorpType:exists(OLS[3,string])){
                TorpWepType = TorpType[OLS[3,string],number]
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Torpedo Weapon Type changed to: "+OLS[3,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unrecognized Torpedo Weapon Type: "+OLS[3,string])
            }
        }
        
        if(OLS[2,string] == "turtype"){
            if(TurretType:exists(OLS[3,string])){
                TurretWepType = TurretType[OLS[3,string],number]
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Turret Weapon Type changed to: "+OLS[3,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unrecognized Turret Weapon Type: "+OLS[3,string])
            }
        }
    }
}

##########
###Warp###
##########
if(first() | dupefinished()){
    LocList = WarpLoc:keys():concat(", ")
    
    function void warp(WarpVec:vector,Ang:angle){
        if(WarpVec == vec(0,0,0)){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot warp to 0,0,0")
        }
        else{
            if(isJammed(WarpVec)){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Destination jammed, cannot warp.")
                return
            }
            PrevPos = DriveEnt:pos()
            PrevAng = DriveEnt:angles()
            Drive[DestInput,vector] = WarpVec
            Drive[AngInput,angle] = Ang
            Destination = WarpVec
            AngleOffset = Ang
            Angle = ang()
            
            timer("resetwarp",1000)
            timer("warp",100)
        }
    }
}

if(chatClk(O)){
    if(OLS[1,string] == WarpPrefix){
        hideChat(1)
        if(OLS[2,string] == "vec"){
            WarpF = 1
            local V = OLS[3,string]:explode(",")
            local X = V[1,string]:toNumber()
            local Y = V[2,string]:toNumber()
            local Z = V[3,string]:toNumber()
            
            local Dest = round(vec(X,Y,Z))
            
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to Vector: ",ColGrn,Dest)
            warp(Dest,AngleOffset)
        }
            
        if(OLS[2,string] == "ang" | OLS[2,string] == "angle"){
            if(OLS[3,string] == "reset"){
                WarpF = 1
                local AngOffset = DriveEnt:toLocal(ang(0,0,0)) + DriveOffset
                local Dest = DriveEnt:pos()
                
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Resetting ship angles: ",ColGrn,AngOffset)
                warp(Dest,AngOffset)
            }
            elseif(OLS[3,string] != "reset"){
                WarpF = 1
                local V = OLS[3,string]:explode(",")
                local X = V[1,string]:toNumber()
                local Y = V[2,string]:toNumber()
                local Z = V[3,string]:toNumber()
        
                local Ang = round(ang(X,Y,Z))
                local Dest = DriveEnt:pos()
                
                warp(Dest,Ang)
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Rotating to angle offset: ",ColGrn,Ang)
            }
        }
        
        if(OLS[2,string] == "forward" | OLS[2,string] == "back" | OLS[2,string] == "left" | OLS[2,string] == "right" | OLS[2,string] == "up" | OLS[2,string] == "down"){
            WarpF = 1
        
            if(OLS[3,string]:toNumber() == 0 & OLS[2,string] != "back"){
                LWarp = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot warp nowhere")
                timer("reset",1000)
            }
            
            if(OLS[2,string] == "forward" & LWarp != 1){
                WarpF = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping forward by: ",ColGrn,OLS[3,string]:toNumber())
                Dest = DriveEnt:pos() + vec(OLS[3,string]:toNumber(),0,0)
            }
            
            if(OLS[2,string] == "back" & LWarp != 1){
                if(OLS[3,string]:toNumber() == 0){
                    WarpF = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to previous position")
                    Dest = PrevPos
                }
                else{
                    WarpF = 1
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping back by: ",ColGrn,OLS[3,string]:toNumber())
                    Dest = DriveEnt:pos() - vec(OLS[3,string]:toNumber(),0,0)
                }
            }
            
            if(OLS[2,string] == "left" & LWarp != 1){
                WarpF = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping left by: ",ColGrn,OLS[3,string]:toNumber())
                Dest = DriveEnt:pos() + vec(0,OLS[3,string]:toNumber(),0)
            }
            
            if(OLS[2,string] == "right" & LWarp != 1){
                WarpF = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping right by: ",ColGrn,OLS[3,string]:toNumber())
                Dest = DriveEnt:pos() - vec(0,OLS[3,string]:toNumber(),0)
            }
            
            if(OLS[2,string] == "up" & LWarp != 1){
                WarpF = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping up by: ",ColGrn,OLS[3,string]:toNumber())
                Dest = DriveEnt:pos() + vec(0,0,OLS[3,string]:toNumber())
            }
            
            if(OLS[2,string] == "down" & LWarp != 1){
                WarpF = 1
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping down by: ",ColGrn,OLS[3,string]:toNumber())
                Dest = DriveEnt:pos() - vec(0,0,OLS[3,string]:toNumber())
            }
            
            if(LWarp != 1){
                warp(Dest,AngleOffset)
            }
        }

    
        if(OLS[1,string] == WarpPrefix & WarpF == 0){
            hideChat(1)
            Ply = findPlayerByName(OLS[2,string])
            
            if(Ply:isPlayer()){
                WarpF = 1
                PlyCol = teamColor(Ply:team())
                local Dest = Ply:pos()
            
                warp(Dest,AngleOffset)
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to Player: <",PlyCol,Ply:name(),ColOng,">")
            }
            elseif(WarpLoc:exists(OLS[2,string])){
                WarpF = 1
                local Dest = round(WarpLoc[OLS[2,string],vector])
                
                warp(Dest,AngleOffset)
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warping to location: ",ColGrn,OLS[2,string])
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot warp to: ",ColRed,OLS[2,string])
            }
        }
    }
}


if(clk("resetwarp")){
    Destination = vec()
    Drive[DestInput,vector] = vec()
    AngleOffset = ang()
    Warp = 0
    Drive[WarpInput,number] = 0
    WarpF = 0
}

if(clk("warp")){
    Warp = 1
    Drive[WarpInput,number] = 1
}

if(changed(Drive)){
    if(->Drive){
        DriveEnt = Drive:entity()
        DriveOffset = DriveEnt:angles()
        DriveType = DriveEnt:type()
        
        if(DriveType == "ship_drive" | DriveType == "bsg_drive" | DriveType == "st_warp_drive" | DriveType == "sg_hyperdrive" | DriveType == "spore_drive" | DriveType == "quantum_slipstream_drive"){
            DestInput = "Destination"
            WarpInput = "Activate"
            AngInput = "Angle Offset"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"TSCM Drive Linked.")
        }
        elseif(DriveType == "gmod_wire_hoverdrivecontroler" | DriveType == "gmod_wire_teleporter"){
            DestInput = "TargetPos"
            WarpInput = "Jump"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Wire Drive Linked")
        }
        elseif(DriveType == "warpdrive"){ #SBEP Warp Drive
            DestInput = "Destination"
            WarpInput = "Warp"
            AngInput = ""
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"SBEPDrive Linked")
        }
        elseif(DriveType == "st_shuttle_type11"){
            DestInput = "Transwarp Destination"
            WarpInput = "Transwarp"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Type 11 Shuttle Linked")
        }
        elseif(DriveType == "st_shuttle_type9" | DriveType == "st_Shuttle_type6"){
            DestInput = "Warp Destination"
            WarpInput = "Engage Warp"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Shuttle Linked")
        }
        elseif(DriveType == "sci_fi_shuttle"){
            DestInput = "FTL Co-ordinates"
            WarpInput = "FTL Jump"
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Sci-fi Shuttle Linked")
        }
        elseif(DriveType == "sent_tardis_interior" | DriveType == "sent_tardis"){
            DestInput = "XYZ"
            WarpInput = "Demat" 
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"TARDIS Linked")
        }
        elseif(DriveType == "gmod_wire_expression2"){
            DestInput = "Destination"
            WarpInput = "Warp"
            AngInput = "Angle Offset"
        }
        elseif(->Destination & ->Warp){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Manual Drive Linked")
        }
        elseif(->Drive){
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Unable to link to: "+DriveType)
        }        
        else{
            printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Unlinked")
        }
    }
}

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "wspeed"){
            if(OLS[3,string]:toNumber() <= 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Warp Factor is: "+WarpFactor)
            }
            elseif(OLS[3,string]:toNumber() >= 11){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warp Factor cannot go above 9.975. Setting Warp Factor to max.")
                WarpFactor = 10
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Warp Factor changed to: "+OLS[3,string]:toNumber())
                WarpFactor = OLS[3,string]:toNumber()
            }
        }
    }    
}

################
###Drive Core###
################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "cspeed"){
            if(OLS[3,string]:toNumber() < 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Drive Core Speed is: "+DCoreSpeed)
            }
            elseif(OLS[3,string]:toNumber() > 2){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Speed cannot go above 2. Setting Speed to max.")
                DCoreSpeed = 2
                DriveCore["Speed Multiplier",number] = 2
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Speed changed to: "+OLS[3,string]:toNumber())
                DCoreSpeed = OLS[3,string]:toNumber()
                DriveCore["Speed Multiplier",number] = OLS[3,string]:toNumber()
            }
        }
    }    
}


if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "ctspeed"){
            if(OLS[3,string]:toNumber() < 0.5){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Invalid number specified. Current Drive core Turnspeed is: "+DCoreTurnSpeed)
            }
            elseif(OLS[3,string]:toNumber() > 2){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Turnspeed cannot go above 2. Setting Turnspeed to max.")
                DCoreTurnSpeed = 2
                DriveCore["Turn Rate Multiplier",number] = 2
            }
            else{
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Drive Core Turnspeed changed to: "+OLS[3,string]:toNumber())
                DCoreTurnSpeed = OLS[3,string]:toNumber()
                DriveCore["Turn Rate Multiplier",number] = OLS[3,string]:toNumber()
            }
        }
    }    
}
################
###Calculator###
################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "calc"){
            if(OLS[3,string]:toNumber() == 0 | OLS[5,string]:toNumber() == 0){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"NaN or 0 Used as Input, Cannot Calculate.")
            }
            elseif(OLS[4,string] == "+"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ", vec(0,255,115), OLS[3,string]:toNumber() + OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "-"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ", vec(0,255,115), OLS[3,string]:toNumber() - OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "*" | OLS[4,string] == "x"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ", vec(0,255,115), OLS[3,string]:toNumber() * OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "/"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ", vec(0,255,115), OLS[3,string]:toNumber() / OLS[5,string]:toNumber())
            }
            
            elseif(OLS[4,string] == "^"){
                printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Calc: ", vec(0,255,115), OLS[3,string]:toNumber() ^ OLS[5,string]:toNumber())
            }
        }
    }
}


###################
###Distress Call###
###################

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        if(OLS[2,string] == "distress"){
            findIncludeEntity(Core:entity())
            
            if(findInBox(vec(15839,15835,15834),vec(-15839,35,33)) == 1){ #Milkyway
                DistressLocation = "Milkyway Space"
                Found = 1
            }
            
            if(findInSphere(vec(0,8032,8064),4280) == 1){ #Earth
                DistressLocation = "Earth"
                Found = 1
            }
            
            if(findInSphere(vec(-4480,13792,9920),1550) == 1){ #Moon
                DistressLocation = "Moon"
                Found = 1
            }
            
            
            if(findInBox(vec(15837,-9,15839),vec(-15836,-15836,32)) == 1){ #Pegasus
                DistressLocation = "Pegasus Space"
                Found = 1
            }
            
            if(findInSphere(vec(-7552,-7056,6832),5160) == 1){ #Shakur
                DistressLocation = "Shakuras"
                Found = 1
            }
            
            if(findInBox(vec(7068,-11246,10079),vec(9769,-4816,9032)) == 1){ #Station
                DistressLocation = "Station"
                Found = 1
            }
            
            
            if(findInBox(vec(15835,15840,0),vec(-15840,-15838,-14012)) == 1){ #Universe
                DistressLocation = "Universe Space"
                Found = 1
            }
            
            if(findInSphere(vec(7168,8704,-6064),5015) == 1){ #Hiigara
                DistressLocation = "Hiigara"
                Found = 1
            }
            
            if(findInSphere(vec(10624,-10668,-9384),4112) == 1){ #Desert
                DistressLocation = "Desert"
                Found = 1
            }
            
            if(findInSphere(vec(-9792,-79,-4688),3122) == 1){ #Lava
                DistressLocation = "Lava"
                Found = 1
            }
            
            elseif(Found == 0){
                if(entity():parent():isValid()){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Cannot get ship Location. The ship is parented.")
                }
                else{
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"You are in an unrecognized location. Cannot send Distress Call")
                }
            }
            
            if(Shield:entity():type() == "atlantis_shield_emitter"){
                ShieldCurEng = Shield["Current Energy",number]
                ShieldMaxEng = Shield["Max Energy",number]
            }
            elseif(Shield:entity():type() == "st_shield_emitter"){
                ShieldCurEng = Shield["Total Charge",number]
                ShieldMaxEng = Shield["Max Charge",number]
            }
            
            SH = round(ShieldCurEng / ShieldMaxEng * 100)
            CP = round(Core["Plating",number])
            HP = round(Core["Health",number] / Core["Max Health",number] * 100)
            
            botSayAlliance("AI"," [Vethian] ",ColPink,"Distress Call initated from: [" +Shipname+ "] Owned by: [" +owner():name()+ "]")
            timer("distresswait",2000)
            Found = 0
        }
    }
}

if(clk("distresswait")){ #Distress Info
    botSayAlliance("AI"," [Vethian] ",ColPink,"Distress Location: [" +DistressLocation+ "] Shields at: [" +SH+ "%] Plating at: [" +CP+ "%] Hull at: [" +HP+ "%]")
}


#################
###Transporter###
#################

if(first() | dupefinished()){
    function void transport(Ent:entity,Pos:vector,BeamType:string){
        if(Transporter:entity():type() == "transporter_pad"){
            PadTarget = "Target1"
            PadDest = "TargetLocation"
            
            if(BeamType == "vector"){
                PadBeam = "Beam to vector"
            }
            
            if(BeamType == "beamup"){
                PadBeam = "Energise pad"
            }
            
            if(BeamType == "beamdown"){
                PadBeam = "Beam from pads"
            }
        }
        
        if(Transporter:entity():type() == "asgard_transporter"){
            PadTarget = "Target"
            PadDest = "Destination"
            
            if(BeamType == "vector"){
                PadBeam = "Send"
            }
            
            if(BeamType == "beamup"){
                PadBeam = "Retrieve"
            }
            
            if(BeamType == "beamdown"){
                PadBeam = "Send"
            }
        }
        
        TransBeamType = BeamType
        
        Transporter[PadTarget,entity] = Ent
        Transporter[PadDest,vector] = Pos
        
        timer("beam",10)
        timer("resetbeam",1000)
    }
}

if(clk("beam")){
    Transporter[PadBeam,number] = 1
}

if(clk("resetbeam")){
    Transporter[PadTarget,entity] = noentity()
    Transporter[PadDest,vector] = vec()
    Transporter[PadBeam,number] = 0
}

if(chatClk(O)){
    if(OLS[1,string] == Prefix){
        hideChat(1)
        
        if(OLS[2,string] == "brig" | OLS[2,string] == "jail" | OLS[2,string] == "babyjail"){
            local Ply = findPlayerByName(OLS[3,string])
            
            if(Ply:isPlayer()){
                transport(Ply,BrigEnt:pos(),"vector")
                
                if(OLS[2,string] == "brig"){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming Player: <",teamColor(Ply:team()),Ply:name(),ColOng,"> to the brig")
                }
                if(OLS[2,string] == "jail"){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming Player: <",teamColor(Ply:team()),Ply:name(),ColOng,"> to the jail")
                }
                if(OLS[2,string] == "babyjail"){
                    printColor(ColTeam,"[AI]",ColPink," [Vethian] ",ColOng,"Beaming Player: <",teamColor(Ply:team()),Ply:name(),ColOng,"> to the ",vec(255,0,0),"g",vec(255,139,0),"a",vec(232,255,0),"y ",vec(93,255,0),"b",vec(0,255,46),"a",vec(0,255,185),"b",vec(0,185,255),"y ",vec(0,46,255),"j",vec(93,0,255),"a",vec(232,0,255),"i",vec(255,0,139),"l")
                }
            }
        }
    }
}
