@name Solar System
@inputs EGP:wirelink
@outputs Warp Dest:vector #AimE:entity
@persist X TFlop SolarSys [AimE SunE EarthE MoonE]:entity 
@persist [WarpBPos SelectB1Pos SelectB2Pos]:vector [WarpB SelectB1 SelectB2]:entity

#This is very WIP and currently only the milkyway galaxy works fully
#Universe isn't implemented at all yet
#Pegasus doesn't have any planets yet
#You also can't switch back to milkyway from pegasus


#[
Planets Center/Models
These are different in the warp controls

Earth 0 8032 8064 models/kobol/kobol.mdl
Moon -4480 13792 9920 models/zup/planets/moon_001.mdl
Milky Space -10431,8720,8661

Shakuras -7552 -7056 6832 models/sb_forlorn/bluemars.mdl
Pega Space 1735 -9513 8913

Hiigara 7168 8704 -6064 models/hiigara/hiigara.mdl
Desert Planet 10624 -10668 -9384 models/planets/chinook.mdl
Lava Planet -9792 -79 -4688 models/sb_forlorn/vimana.mdl
]#

if(first()){
    TFlop = 0
    SolarSys = 1
    propSpawnUndo(0)
    timer("solarspawn",1)
    timer("usecheck",1)
    EGP:egpClear()
    
#use findInBox later to figure out which part of the map the e2 is in to generate the correct solar system
}

if(clk("solarspawn")){
    if(SolarSys == 1){
        timer("solarspin",1)

        #Sun
        holoCreate(1,entity():pos() + vec(0,0,30)) 
        holoModel(1,"models/atmospheres/sun.mdl")
        holoScale(1,vec(0.011))
        holoParent(1,entity())

        #Props are so the use function works
        SunE = propSpawn("models/holograms/hq_sphere.mdl",entity():pos() + vec(0,0,30),1)
        SunE:setAlpha(0)
        SunE:parentTo(holoEntity(1))
        noCollideAll(SunE,1)


        #Earth
        holoCreate(2,entity():pos() + vec(30,0,30)) 
        holoModel(2,"models/kobol/kobol.mdl")
        #holoColor(2,vec(0,255,0))
        holoScale(2,vec(0.0015))
        holoParent(2,holoEntity(1))

        EarthE = propSpawn("models/holograms/hq_sphere.mdl",entity():pos() + vec(30,0,30),1)
        EarthE:setAlpha(0)
        noCollideAll(EarthE,1)


        #Moon
        holoCreate(3,entity():pos() + vec(40,0,33)) 
        holoModel(3,"models/zup/planets/moon_001.mdl")
        holoScale(3,vec(0.001))
        holoParent(3,holoEntity(2))

        MoonE = propSpawn("models/sprops/geometry/sphere_3.mdl",entity():pos() + vec(40,0,33),1)
        MoonE:setAlpha(0)
        noCollideAll(MoonE,1)
    }
}


if(clk("solarspin")){
    timer("solarspin",100)
    X += 1
    if(X >= 360){
        X = 0
    }
    holoAng(1,entity():toWorld(ang(0,X*5,0)))
    holoAng(2,entity():toWorld(ang(0,X*10,0)))
    EarthE:setPos(holoEntity(2):pos()) #You can't do stuff to children >:(
    MoonE:setPos(holoEntity(3):pos())
}


###Usecheck
if(clk("usecheck")){
    timer("usecheck",100)
    if(owner():keyUse()){ #Make this find other people using for(I =) probably
        timer("delay",1000)
        stoptimer("usecheck")
        AimE = owner():aimEntity()

        if(AimE == SunE){
            TFlop = !TFlop
            if(TFlop == 1 & SolarSys == 1){ #Milkyway
                stoptimer("solarspin")
                EGP:entity():setPos(entity():pos() + vec(0,0,-2)) #Puts the EGP emitter under the e2
                timer("parentegp",10) #this has to be a timer because setpos doesn't move it before it parents
                EGP["Scale",number] = 0.5
                EGP["Angle",angle] = owner():angles() + ang(0,-90,90)
                EGP["Position",vector] = vec(0,0,50)
                EGP:entity():setAlpha(1)
                noCollideAll(EGP:entity(),1)
                
                WarpBPos = SunE:pos() + vec(1,5,23):rotate(owner():angles()) #Space WarpB
                SelectB1Pos = SunE:pos() + vec(1,5,19.5):rotate(owner():angles())
                SelectB2Pos = SunE:pos() + vec(1,5,16):rotate(owner():angles())
                
                Dest = vec(-10431,8720,8661)
                timer("sunbuttonspawn",1)
                timer("sunegp",1)
            }

            if(TFlop == 1 & SolarSys == 2){ #Pegasus
                print("solar2")
                stoptimer("solarspin")
                EGP:entity():setPos(entity():pos() + vec(0,0,-2)) 
                timer("parentegp",10)
                EGP:entity():setAlpha(1)
                noCollideAll(EGP:entity(),1)
                #This ^ is here because later I will make it autodetect which system it spawns in
                EGP["Scale",number] = 0.5
                EGP["Angle",angle] = owner():angles() + ang(0,-90,90)
                EGP["Position",vector] = vec(0,0,50)
                
                WarpBPos = SunE:pos() + vec(1,5,23):rotate(owner():angles()) #Space WarpB
                SelectB1Pos = SunE:pos() + vec(1,5,19.5):rotate(owner():angles())
                SelectB2Pos = SunE:pos() + vec(1,5,16):rotate(owner():angles())
                
                Dest = vec(1735,-9513,8913)
                timer("sunbuttonspawn",1)
                timer("sunegp",1)
                timer("pegaegp",100)
            }

            if(TFlop == 0){ #Remove display and start spinning again
                timer("solarspin",1)
                EGP["Scale",number] = 0
                EGP:egpClear()
                WarpB:propDelete()
                SelectB1:propDelete()
                SelectB2:propDelete()
            }
        }
        
        if(AimE == WarpB & TFlop == 1){ #Warp Button
            WarpB:soundPlay(1,300,"resource/warning.wav")
            EGP:egpColor(10,vec(200,255,255))
            timer("unwarp",1000)
            weld(EarthE,entity())
            weld(MoonE,entity())
            Warp = 1
        }
        
        if(AimE == SelectB1 & TFlop == 1){ #Pegasus
            SelectB1:soundPlay(1,300,"resource/warning.wav")
            EGP:egpColor(12,vec(200,255,255))
            timer("unselect",1000)
            SolarSys = 2
            timer("pegaegp",10)
            holoColor(1,vec(0,150,150))
        }
        
        if(AimE == SelectB2 & TFlop == 1){ #Universe
            WarpB:soundPlay(1,300,"resource/warning.wav")
            EGP:egpColor(14,vec(200,255,255))
            timer("unselect",1000)
            SolarSys = 3
            holoColor(1,vec(255,200,65))
        }


        if(AimE == EarthE & TFlop == 1){ #Earth
            WarpB:propDelete()
            timer("earthegp",1)
            EGP["Scale",number] = 0.5
            EGP["Angle",angle] = owner():angles() + ang(0,-90,90)
            EGP["Position",vector] = EarthE:pos() - EGP:entity():pos() + vec(0,0,21)
            WarpBPos = EarthE:pos() + vec(1,3.5,16):rotate(owner():angles())
            Dest = vec(0,8032,9564)
            timer("buttonspawn",1)
        }

        if(AimE == MoonE & TFlop == 1){ #Moon
            WarpB:propDelete()
            timer("moonegp",1)
            EGP["Scale",number] = 0.5
            EGP["Angle",angle] = owner():angles() + ang(0,-90,90)
            EGP["Position",vector] = MoonE:pos() - EGP:entity():pos() + vec(0,0,21)
            WarpBPos = MoonE:pos() + vec(1,3.5,11):rotate(owner():angles())
            Dest = vec(-4480,13817,11000)
            timer("buttonspawn",1)
        }
    }
}


if(clk("delay")){
    timer("usecheck",1)
}

if(clk("buttonspawn")){
    WarpB = propSpawn("models/bull/gates/microcontroller1.mdl",WarpBPos,1)
    WarpB:setAng(owner():angles() + ang(90,-90,90))
    noCollideAll(WarpB,1)
    weld(WarpB,entity())
    WarpB:setAlpha(0)
}

if(clk("sunbuttonspawn")){
    WarpB = propSpawn("models/bull/gates/microcontroller1.mdl",WarpBPos,1)
    WarpB:setAng(owner():angles() + ang(90,-90,90))
    noCollideAll(WarpB,1)
    weld(WarpB,entity())
    WarpB:setAlpha(0)
    
    SelectB1 = propSpawn("models/bull/gates/microcontroller1.mdl",SelectB1Pos,1)
    SelectB1:setAng(owner():angles() + ang(90,-90,90))
    noCollideAll(SelectB1,1)
    weld(SelectB1,entity())
    SelectB1:setAlpha(0)
    
    SelectB2 = propSpawn("models/bull/gates/microcontroller1.mdl",SelectB2Pos,1)
    SelectB2:setAng(owner():angles() + ang(90,-90,90))
    noCollideAll(SelectB2,1)
    weld(SelectB2,entity())
    SelectB2:setAlpha(0)
}


if(clk("unwarp")){
    EGP:egpColor(10,vec(0,255,255))
    Warp = 0
}

if(clk("unselect")){
    EGP:egpColor(12,vec(0,255,255))
    EGP:egpColor(14,vec(0,255,255))
}

if(clk("parentegp")){
    EGP:entity():parentTo(entity())
}


###EGP
if(clk("sunegp")){
    EGP:egpClear()

    EGP:egpCircle(1,vec2(256,400),vec2(105,105)) #planet circle

    EGP:egpLine(2,vec2(256,300),vec2(256,200)) #line up
    EGP:egpSize(2,4)

    EGP:egpLine(3,vec2(178,230),vec2(335,230)) #sideways line
    EGP:egpSize(3,4)

    EGP:egpText(4,"Location",vec2(260,210))
    EGP:egpText(5,"Milkyway",vec2(260,230))

    EGP:egpText(9,"Space",vec2(215,205))
    EGP:egpAlign(9,1)
    EGP:egpBoxOutline(10,vec2(215,215),vec2(74,25)) #selectbox
    EGP:egpColor(10,vec(0,255,255))
    EGP:egpSize(10,2)

    EGP:egpText(11,"Pegasus",vec2(215,235))
    EGP:egpAlign(11,1)
    EGP:egpBoxOutline(12,vec2(215,245),vec2(74,25)) #selectbox
    EGP:egpColor(12,vec(0,255,255))
    EGP:egpSize(12,2)

    EGP:egpText(13,"Universe",vec2(215,260))
    EGP:egpAlign(13,1)
    EGP:egpBoxOutline(14,vec2(215,270),vec2(74,25)) #selectbox
    EGP:egpColor(14,vec(0,255,255))
    EGP:egpSize(14,2)

    for(L = 1,3){
        EGP:egpColor(L,vec(0,255,255))
    }
}


if(clk("pegaegp")){
    EGP:egpText(11,"Milkyway",vec2(215,235))
}



if(clk("earthegp")){ #EarthEGP

    EGP:egpClear()

    EGP:egpCircle(1,vec2(256,424),vec2(55,55)) #planet circle

    EGP:egpLine(2,vec2(256,370),vec2(256,280)) #line up
    EGP:egpSize(2,4)

    EGP:egpLine(3,vec2(200,312),vec2(330,312)) #sideways line
    EGP:egpSize(3,4)

    EGP:egpText(4,"Location",vec2(260,292))
    EGP:egpText(5,"Earth",vec2(260,312))
    EGP:egpText(6,"0",vec2(254,312))
    EGP:egpText(7,"8032",vec2(254,326))
    EGP:egpText(8,"9564",vec2(254,340))

    for(I = 6,8){
        EGP:egpAlign(I,2)
    }

    EGP:egpText(9,"Warp",vec2(207,285))
    EGP:egpBoxOutline(10,vec2(227,296),vec2(50,25)) #warpbox
    EGP:egpColor(10,vec(0,255,255))
    EGP:egpSize(10,2)

    for(L = 1,3){
        EGP:egpColor(L,vec(0,255,255))
    }
}


if(clk("moonegp")){ #MoonEGP

    EGP:egpClear()

    EGP:egpCircle(1,vec2(256,424),vec2(14,14)) #planet circle

    EGP:egpLine(2,vec2(256,410),vec2(256,320)) #line up
    EGP:egpSize(2,4)

    EGP:egpLine(3,vec2(200,352),vec2(330,352)) #sideways line
    EGP:egpSize(3,4)

    for(I = 1,3){
        EGP:egpColor(I,vec(0,255,255))
    }

    EGP:egpText(4,"Location",vec2(260,332))
    EGP:egpText(5,"Moon",vec2(260,352))
    EGP:egpText(6,"-4480",vec2(254,352))
    EGP:egpText(7,"14792",vec2(254,366))
    EGP:egpText(8,"14000",vec2(254,380))

    for(I = 6,8){
        EGP:egpAlign(I,2)
    }

    EGP:egpText(9,"Warp",vec2(207,325))
    EGP:egpBoxOutline(10,vec2(227,336),vec2(50,25)) #warpbox
    EGP:egpColor(10,vec(0,255,255))
    EGP:egpSize(10,2)
}
