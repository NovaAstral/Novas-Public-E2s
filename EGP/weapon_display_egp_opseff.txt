@name Weapon Status EGP
@inputs EGP:wirelink [Asgard1, Asgard2, Asgard3, Asgard4, CAsgard1, CAsgard2, Beam1, Beam2, Beam3, Beam4, Ion1, Ion2, Torp1, Torp2, Torp3, Torp4, Torp5, Torp6]:wirelink 
@outputs CPos:vector2
@persist

#Made by Nova Astral
#Discord: Nova Astral#2079
#Steam: http://steamcommunity.com/profiles/76561198068127098

#pls dont use this, its horrible with like 900 constant ops
#and made for a ship with a specific weapon setup that doesn't even exist anymore

#the reason this has 900 constant ops is because this was my e2 to get back into EGP after
#like 2 or 3 years of not doing it.
#so every object on the screen is being created again every 100ms

if(first()){
    EGP:egpClear()
    timer("update",100)
    timer("create",10)
    timer("size",20)
}

if(clk("update")){
    CPos = EGP:egpCursor(owner())
    Asgard1C = Asgard1["Charge",number]
    Asgard2C = Asgard2["Charge",number]
    Asgard3C = Asgard3["Charge",number]
    Asgard4C = Asgard4["Charge",number]
    CAsgard1C = CAsgard1["Charged %",number]
    CAsgard2C = CAsgard2["Charged %",number]
    Beam1C = Beam1["Charge",number]
    Beam2C = Beam2["Charge",number]
    Beam3C = Beam3["Charge",number]
    Beam4C = Beam4["Charge",number]
    Ion1C = Ion1["Charge",number]
    Ion2C = Ion2["Charge",number]
    timer("update",100)
}

if(clk("size")){
EGP:egpSize(3,12)
EGP:egpSize(6,12)
EGP:egpSize(9,12)
EGP:egpSize(12,12)
EGP:egpSize(15,12)
EGP:egpSize(18,12)
EGP:egpSize(21,12)
EGP:egpSize(22,12)
EGP:egpSize(25,12)
EGP:egpSize(26,12)
EGP:egpSize(29,12)
EGP:egpSize(30,12)
EGP:egpSize(33,12)
EGP:egpSize(34,12)
EGP:egpSize(37,12)
EGP:egpSize(40,12)
EGP:egpSize(41,12)
EGP:egpSize(42,12)
EGP:egpSize(43,12)
EGP:egpSize(44,12)
EGP:egpSize(45,12)
EGP:egpSize(46,12)
EGP:egpSize(47,12)
EGP:egpSize(48,12)
EGP:egpSize(49,12)
EGP:egpSize(50,12)
EGP:egpSize(51,12)
EGP:egpSize(52,12)
stoptimer("size")
stoptimer("create")
}


if(clk("create")){
###Asgard1 Bar
EGP:egpBox(1,vec2(125,40),vec2(200,20))
EGP:egpColor(1,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(2,vec2(125,40),vec2(Asgard1C*1.98,18))
EGP:egpText(3,"Asgard Beam 1 Charge: " +Asgard1C+"%",vec2(45,15))

if(Asgard1C >= 90) {EGP:egpColor(3,vec(0,255,0)),  EGP:egpColor(2,vec(0,255,0))}
if(Asgard1C < 50) {EGP:egpColor(3,vec(238,238,0)), EGP:egpColor(2,vec(238,238,0))}
if(Asgard1C < 25) {EGP:egpColor(3,vec(255,0,0)),   EGP:egpColor(2,vec(255,0,0))}

#EGP:egpText(4,"Strength: " +Asgard1["Strength",number],vec2(210,20)) #cant get input state from wirelink
}

if(clk("create")){
###Asgard2 Bar
EGP:egpBox(4,vec2(125,80),vec2(200,20))
EGP:egpColor(4,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(5,vec2(125,80),vec2(Asgard2C*1.98,18))
EGP:egpText(6,"Asgard Beam 2 Charge: " +Asgard2C+"%",vec2(45,55))

if(Asgard2C >= 90) {EGP:egpColor(6,vec(0,255,0)),  EGP:egpColor(5,vec(0,255,0))}
if(Asgard2C < 50) {EGP:egpColor(6,vec(238,238,0)), EGP:egpColor(5,vec(238,238,0))}
if(Asgard2C < 25) {EGP:egpColor(6,vec(255,0,0)),   EGP:egpColor(5,vec(255,0,0))}
}

if(clk("create")){
###Asgard3 Bar
EGP:egpBox(7,vec2(125,120),vec2(200,20))
EGP:egpColor(7,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(8,vec2(125,120),vec2(Asgard3C*1.98,18))
EGP:egpText(9,"Asgard Beam 3 Charge: " +Asgard3C+"%",vec2(45,95))    

if(Asgard3C >= 90) {EGP:egpColor(9,vec(0,255,0)),  EGP:egpColor(8,vec(0,255,0))}
if(Asgard3C < 50) {EGP:egpColor(9,vec(238,238,0)), EGP:egpColor(8,vec(238,238,0))}
if(Asgard3C < 25) {EGP:egpColor(9,vec(255,0,0)),   EGP:egpColor(8,vec(255,0,0))}
}

if(clk("create")){
###Asgard4 Bar
EGP:egpBox(10,vec2(125,160),vec2(200,20))
EGP:egpColor(10,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(11,vec2(125,160),vec2(Asgard4C*1.98,18))
EGP:egpText(12,"Asgard Beam 4 Charge: " +Asgard4C+"%",vec2(45,135))
    
if(Asgard4C >= 90) {EGP:egpColor(12,vec(0,255,0)),  EGP:egpColor(11,vec(0,255,0))}
if(Asgard4C < 50) {EGP:egpColor(12,vec(238,238,0)), EGP:egpColor(11,vec(238,238,0))}
if(Asgard4C < 25) {EGP:egpColor(12,vec(255,0,0)),   EGP:egpColor(11,vec(255,0,0))}
}


if(clk("create")){
###CAP Asgard1 Bar
EGP:egpBox(13,vec2(125,200),vec2(200,20))
EGP:egpColor(13,vec(0,0,255))


}

if(clk("update")){
EGP:egpBox(14,vec2(125,200),vec2(CAsgard1C*1.98,18)) #SHHH JUST IGNORE IT I KNOW ITS NOT ALIGNED TO THE CENTER SHUT
EGP:egpText(15,"CAP Asgard Beam 1 Charge: " +round(CAsgard1C)+"%",vec2(45,175))    

if(CAsgard1C >= 90) {EGP:egpColor(15,vec(0,255,0)),  EGP:egpColor(14,vec(0,255,0))}
if(CAsgard1C < 50) {EGP:egpColor(15,vec(238,238,0)), EGP:egpColor(14,vec(238,238,0))}
if(CAsgard1C < 25) {EGP:egpColor(15,vec(255,0,0)),   EGP:egpColor(14,vec(255,0,0))}
}

if(clk("create")){
###CAP Asgard2 Bar
EGP:egpBox(16,vec2(125,240),vec2(200,20))
EGP:egpColor(16,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(17,vec2(125,240),vec2(CAsgard2C*1.98,18))
EGP:egpText(18,"CAP Asgard Beam 2 Charge: " +round(CAsgard2C)+"%",vec2(45,215))

if(CAsgard2C >= 90) {EGP:egpColor(18,vec(0,255,0)),  EGP:egpColor(17,vec(0,255,0))}
if(CAsgard2C < 50) {EGP:egpColor(18,vec(238,238,0)), EGP:egpColor(17,vec(238,238,0))}
if(CAsgard2C < 25) {EGP:egpColor(18,vec(255,0,0)),   EGP:egpColor(17,vec(255,0,0))}
}

if(clk("create")){
###Beam1 Bar
EGP:egpBox(19,vec2(125,280),vec2(200,20))
EGP:egpColor(19,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(20,vec2(125,280),vec2(Beam1C*1.98,18))
EGP:egpText(21,"Beam Emitter 1 Charge: " +round(Beam1C)+"%",vec2(45,255))

if(Beam1C >= 90) {EGP:egpColor(21,vec(0,255,0)),  EGP:egpColor(20,vec(0,255,0))}
if(Beam1C < 50) {EGP:egpColor(21,vec(238,238,0)), EGP:egpColor(20,vec(238,238,0))}
if(Beam1C < 25) {EGP:egpColor(21,vec(255,0,0)),   EGP:egpColor(20,vec(255,0,0))}

EGP:egpText(22,"Type: " +Beam1["Type",string],vec2(228,274))
}



if(clk("create")){
###Beam2 Bar
EGP:egpBox(23,vec2(125,320),vec2(200,20))
EGP:egpColor(23,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(24,vec2(125,320),vec2(Beam2C*1.98,18))
EGP:egpText(25,"Beam Emitter 2 Charge: " +round(Beam2C)+"%",vec2(45,295))

if(Beam2C >= 90) {EGP:egpColor(25,vec(0,255,0)),  EGP:egpColor(24,vec(0,255,0))}
if(Beam2C < 50) {EGP:egpColor(25,vec(238,238,0)), EGP:egpColor(24,vec(238,238,0))}
if(Beam2C < 25) {EGP:egpColor(25,vec(255,0,0)),   EGP:egpColor(24,vec(255,0,0))}

EGP:egpText(26,"Type: " +Beam2["Type",string],vec2(228,314))
}


if(clk("create")){
###Beam3 Bar
EGP:egpBox(27,vec2(125,360),vec2(200,20))
EGP:egpColor(27,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(28,vec2(125,360),vec2(Beam3C*1.98,18))
EGP:egpText(29,"Beam Emitter 3 Charge: " +round(Beam3C)+"%",vec2(45,335))

if(Beam3C >= 90) {EGP:egpColor(29,vec(0,255,0)),  EGP:egpColor(28,vec(0,255,0))}
if(Beam3C < 50) {EGP:egpColor(29,vec(238,238,0)), EGP:egpColor(28,vec(238,238,0))}
if(Beam3C < 25) {EGP:egpColor(29,vec(255,0,0)),   EGP:egpColor(28,vec(255,0,0))}

EGP:egpText(30,"Type: " +Beam3["Type",string],vec2(228,354))
}


if(clk("create")){
###Beam4 Bar
EGP:egpBox(31,vec2(125,400),vec2(200,20))
EGP:egpColor(31,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(32,vec2(125,400),vec2(Beam4C*1.98,18))
EGP:egpText(33,"Beam Emitter 4 Charge: " +round(Beam4C)+"%",vec2(45,375))

if(Beam4C >= 90) {EGP:egpColor(33,vec(0,255,0)),  EGP:egpColor(32,vec(0,255,0))}
if(Beam4C < 50) {EGP:egpColor(33,vec(238,238,0)), EGP:egpColor(32,vec(238,238,0))}
if(Beam4C < 25) {EGP:egpColor(33,vec(255,0,0)),   EGP:egpColor(32,vec(255,0,0))}

EGP:egpText(34,"Type: " +Beam4["Type",string],vec2(228,394))
}


if(clk("create")){
###Ion1 Bar
EGP:egpBox(35,vec2(125,440),vec2(200,20))
EGP:egpColor(35,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(36,vec2(125,440),vec2(Ion1C*1.98,18))
EGP:egpText(37,"Ion Laser 1 Charge: " +round(Ion1C)+"%",vec2(45,415))

if(Ion1C >= 90) {EGP:egpColor(37,vec(0,255,0)),  EGP:egpColor(36,vec(0,255,0))}
if(Ion1C < 50) {EGP:egpColor(37,vec(238,238,0)), EGP:egpColor(36,vec(238,238,0))}
if(Ion1C < 25) {EGP:egpColor(37,vec(255,0,0)),   EGP:egpColor(36,vec(255,0,0))}
}


if(clk("create")){
###Ion2 Bar
EGP:egpBox(38,vec2(125,480),vec2(200,20))
EGP:egpColor(38,vec(0,0,255))

}

if(clk("update")){
EGP:egpBox(39,vec2(125,480),vec2(Ion2C*1.98,18))
EGP:egpText(40,"Ion Laser 2 Charge: " +round(Ion2C)+"%",vec2(45,455))

if(Ion2C >= 90) {EGP:egpColor(40,vec(0,255,0)),  EGP:egpColor(39,vec(0,255,0))}
if(Ion2C < 50) {EGP:egpColor(40,vec(238,238,0)), EGP:egpColor(39,vec(238,238,0))}
if(Ion2C < 25) {EGP:egpColor(40,vec(255,0,0)),   EGP:egpColor(39,vec(255,0,0))}
}



if(clk("create")){
###Torp1 Text

}

if(clk("update")){
EGP:egpText(41,"Torpedo 1 Loaded: " +Torp1["Loaded",number],vec2(380,34))
EGP:egpText(42,"Type: " +Torp1["Type",string],vec2(380,45))

if(Torp1["Loaded",number] == 1) {EGP:egpColor(41,vec(0,255,0))}
if(Torp1["Loaded",number] < 1) {EGP:egpColor(41,vec(255,0,0))}
if(Torp1["Loaded",number] > 1) {EGP:egpColor(41,vec(140,0,140))}
}


if(clk("create")){
###Torp2 Text

}

if(clk("update")){
EGP:egpText(43,"Torpedo 2 Loaded: " +Torp2["Loaded",number],vec2(380,74))
EGP:egpText(44,"Type: " +Torp2["Type",string],vec2(380,85))

if(Torp2["Loaded",number] == 1) {EGP:egpColor(43,vec(0,255,0))}
if(Torp2["Loaded",number] < 1) {EGP:egpColor(43,vec(255,0,0))}
if(Torp2["Loaded",number] > 1) {EGP:egpColor(43,vec(140,0,140))}
}


if(clk("create")){
###Torp3 Text

}

if(clk("update")){
EGP:egpText(45,"Torpedo 3 Loaded: " +Torp3["Loaded",number],vec2(380,114))
EGP:egpText(46,"Type: " +Torp3["Type",string],vec2(380,125))

if(Torp3["Loaded",number] == 1) {EGP:egpColor(45,vec(0,255,0))}
if(Torp3["Loaded",number] < 1) {EGP:egpColor(45,vec(255,0,0))}
if(Torp3["Loaded",number] > 1) {EGP:egpColor(45,vec(140,0,140))}
}


if(clk("create")){
###Torp4 Text

}

if(clk("update")){
EGP:egpText(47,"Torpedo 4 Loaded: " +Torp4["Loaded",number],vec2(380,154))
EGP:egpText(48,"Type: " +Torp4["Type",string],vec2(380,165))
if(Torp4["Loaded",number] == 1) {EGP:egpColor(47,vec(0,255,0))}
if(Torp4["Loaded",number] < 1) {EGP:egpColor(47,vec(255,0,0))}
if(Torp4["Loaded",number] > 1) {EGP:egpColor(47,vec(140,0,140))}
}


if(clk("create")){
###Torp5 Text

EGP:egpText(50,"Type: " +Torp5["Type",string],vec2(380,205))

}

if(clk("update")){
EGP:egpText(49,"Torpedo 5 Loaded: " +Torp5["Loaded",number],vec2(380,194))
EGP:egpText(50,"Type: " +Torp5["Type",string],vec2(380,205))

if(Torp5["Loaded",number] == 1) {EGP:egpColor(49,vec(0,255,0))}
if(Torp5["Loaded",number] < 1) {EGP:egpColor(49,vec(255,0,0))}
if(Torp5["Loaded",number] > 1) {EGP:egpColor(49,vec(140,0,140))}
}


if(clk("create")){
###Torp6 Text

}

if(clk("update")){
EGP:egpText(51,"Torpedo 6 Loaded: " +Torp6["Loaded",number],vec2(380,234))
EGP:egpText(52,"Type: " +Torp6["Type",string],vec2(380,245))

if(Torp6["Loaded",number] == 1) {EGP:egpColor(51,vec(0,255,0))}
if(Torp6["Loaded",number] < 1) {EGP:egpColor(51,vec(255,0,0))}
if(Torp6["Loaded",number] > 1) {EGP:egpColor(51,vec(140,0,140))}
}
