@name Gate Functions
@inputs Gate:wirelink AsgardTP:wirelink TButton ShipCore:wirelink
@outputs Address:string Name:string Owner:string GateTE:entity Message:string
@persist Dest:vector InboundAlarmS:string

interval(500)

#Made by Nova Astral
#Discord: Nova Astral#2079
#Steam: http://steamcommunity.com/profiles/76561198068127098

GateE = Gate:entity()
Gateg = stargate(GateE)

InboundAlarm = 1 #Change this to 0 if you dont want an alarm to play
InboundAlarmS = "alarm/sga_offworld-alarm.wav" #Alarm sound

AutoIris = 0 #Enables the AutoIris feature that opens the iris of the linked gate if..
#..you're near the gate dialing it.
#Might make a chat toggle for this if someone wants it


if(changed(Gate["Inbound",number]) & Gate["Inbound",number] == 1 ){
    print("Incoming Wormhole")
    
    if(InboundAlarm == 1){
        ShipCore:entity():setCoreEnvironmentSound(InboundAlarmS,0.2,100)
    }
        
}

if(changed(Gate["Open",number]) & Gate["Open",number] == 1 & Gate["Inbound",number] == 1){
    timer("update",10)
    timer("waitin",100)
    timer("autoiris",100)
}

if(clk("waitin")){
    print("Gate Active from: < " +Name+ " > with address < " +Address+ " > owned by: <" +Owner+ " >")
}

if(changed(Gate["Open",number]) & Gate["Open",number] == 1 & Gate["Inbound",number] == 0){
    timer("update",10)
    timer("waitout",100)
}

if(clk("waitout")){
    print("Outgoing wormhole to: < " +Name+ " > with address < " +Address+ " > owned by: < " +Owner+ " >")
}

if(changed(Gate["Open",number]) & Gate["Open",number] == 0){
    print("Gate Offline")
    stoptimer("autoiris")
    Address = ""
    Name = ""
    Owner = ""
    ShipCore:entity():stopCoreEnvironmentSound()
}

if(clk("update")){
    Address = Gate["Dialing Address",string]
    Name = Gateg:target():name()
    Owner = Gateg:target():entity():owner():name()
    GateTE = Gateg:target():entity()
    Dest = GateTE:pos()+GateTE:forward()*100
    timer("world",5)
    stoptimer("update")
}


if(clk("world")){
    if(Owner == ""){
    Owner = "world"
}}

if(changed(TButton) & TButton == 1){
    if(isJammed(GateTE:pos()+GateTE:forward()*100)){
    print("Destination Jammed. Transport Aborted.")
    owner():soundPlay(1,2000,"st/shuttlecraft/computer_deny.wav")
}
    if((isJammed(owner():pos()))){
        print("Origin Jammed. Transport Aborted.")
        owner():soundPlay(2,2000,"st/shuttlecraft/computer_deny.wav")
}
    else{
        AsgardTP:stargateAsgardTeleport(owner():pos(),Dest,0)
    }
}


if(changed(Gate["Received",string]) & Gate["Received",string]:length() > 0){
    print("Message received through gate: "+Gate["Received",string])
    Message = Gate["Received",string]
}


if(AutoIris == 1){
    if(clk("autoiris")){
        timer("autoiris",200)
        findIncludeEntity(owner())
        findInSphere(GateTE:pos(),200)
        if(find():isValid() == 1){
            if(Gate:stargateIrisActive() == 1){
                Gate:stargateIrisToggle()
                print("Owner near dialing gate. Opening iris.")
                stoptimer("autoiris")
            }
            elseif(Gate:stargateIrisActive() == 0){
                print("Owner near dialing gate. Iris already open.")
                stoptimer("autoiris")
            }
        }
    }
}
