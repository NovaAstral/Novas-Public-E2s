@name Replicator
@inputs TransporterPad:wirelink Rep:entity SpawnOffset
@outputs RepEnt:entity OutputText:string
@persist EntArray:array

#Made by Nova Astral
#Discord: novaastral / Nova Astral#2079
#Steam: http://steamcommunity.com/profiles/76561198068127098

#There is a tutorial on how to add new things at the bottom of the code

if(first() | duped()){
    printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"The Replicator is online. Type '/rep help' for help.")
    propSpawnUndo(0)
    
    SpawnOffset = 0
    
    EntArray = array() #array that stores all the replicated objects so you can remove them easily

    SpawnPos = vec(-14930,9720,-350)
    #this is some corner of uni that ships generally shouldn't be in
    #if the replicator doesn't work, there's probably a ship there with its shields up
    
    function void replicate(Model:string,Text:string,Offset){
        RepEnt = propSpawn(Model,SpawnPos,0)
        
        printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"Replicating: ",Text)
        OutputText = "Replicating: "+Text
        
        if(TransporterPad:entity():type() == "transporter_pad"){
            TransporterPad["Target1",entity] = RepEnt
            
            TransporterPad["TargetLocation",vector] = Rep:pos() + vec(0,0,SpawnOffset+Offset)
        }
        elseif(TransporterPad:entity():type() == "asgard_transporter"){
            TransporterPad["Target",entity] = RepEnt
            
            TransporterPad["Destination",vector] = Rep:pos() + vec(0,0,SpawnOffset+Offset)
        }
        
        EntArray:insertEntity(EntArray:count()+1,RepEnt)
        
        timer("repon",10)
    }
    
    function void activaterep(Value){
        if(TransporterPad:entity():type() == "transporter_pad"){
            TransporterPad["Beam to vector",number] = Value
        }   
        elseif(TransporterPad:entity():type() == "asgard_transporter"){
            TransporterPad["Send",number] = Value
        }
    }
}

if(clk("repon")){
    activaterep(1)
    Rep:emitSound("st/shuttlecraft/computer_work.mp3")
    
    timer("repoff",100)
}

if(clk("repoff")){
    activaterep(0)
    stopAllTimers()
}

event chat(SaidPly:entity, Said:string,_){
    local OLS = Said:lower():explode(" ")
    
    if(SaidPly == owner()){
        if(OLS[1,string] == "/rep"){
            if(OLS[2,string]:length() < 1){
                printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"You can't replicate nothing!")
            }
                    
            if(OLS[2,string] == "help"){
                printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"Use '/rep <thing>' to replicate something.")
                printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"/rep model <model> will replicate whatever model you input.")
                printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"Replication List:")
                printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"Ember, Burger, Egg, Balloon, Hotdog, Bomb, Tea, Pot, Can, Boot, Melon, Coffee, Antimatter, Ext, Shuttle, Noodles, Sandwich, Sbeptos, Tray, Spacemix, Nuggets, Medicine, Manual, Bucket, Paint")
            }
            
            if(OLS[2,string] == "clean" | OLS[2,string] == "remove" | OLS[2,string] == "clear"){
                 printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"Cleaning up all replicated objects.")
                
                for(I=1,EntArray:count()){
                    Ent = EntArray[I,entity]
                    
                    if(Ent:isValid()){
                        Ent:propDelete()
                    }
                }
            }
            
            if(OLS[2,string] == "model"){
                if(OLS[3,string]:length() < 1){
                    printColor(vec(255,95,215)," [Replicator] ",vec(230,110,0),"You must provide a model path for replication.")
                }
                else{
                    replicate(
                        OLS[3,string], #model string
                        OLS[3,string], #text output
                        0 #model offset
                    )
                }
            }
            
            if(OLS[2,string] == "burger"){
                replicate(
                    "models/food/burger.mdl", #model string
                    "Burger", #text output
                    -20 #offset - burger has a bad origin
                )
            }
            
            if(OLS[2,string] == "egg"){
                replicate(
                    "models/props_phx/misc/egg.mdl",
                    "Egg",
                    0
                )
            }
            
            if(OLS[2,string] == "balloon"){
                replicate(
                    "models/balloons/balloon_classicheart.mdl",
                    "Balloon",
                    0
                )
            }
            
            
            if(OLS[2,string] == "hotdog"){
                replicate(
                    "models/food/hotdog.mdl",
                    "Hotdog",
                    -50 #hotdog has bad origin like the borgor
                )
            }
            
            if(OLS[2,string] == "bomb"){
                replicate(
                    "models/dynamite/dynamite.mdl",
                    "Bomb",
                    0
                )
            }
            
            if(OLS[2,string] == "tea"){
                replicate(
                    "models/props_interiors/pot01a.mdl",
                    "Tea. Earl Grey. Hot.",
                    0
                )
            }
            
            if(OLS[2,string] == "pot"){
                replicate(
                    "models/props_interiors/pot02a.mdl",
                    "Pot (Drugs not included)",
                    0
                )
            }
            
            if(OLS[2,string] == "can"){
                replicate(
                    "models/props_junk/PopCan01a.mdl",
                    "Can",
                    0
                )
            }
            
            if(OLS[2,string] == "boot" | OLS[2,string] == "shoe"){
                replicate(
                    "models/props_junk/Shoe001a.mdl",
                    "Left Boot",
                    0
                )
            }
            
            if(OLS[2,string] == "melon"){
                replicate(
                    "models/props_junk/watermelon01.mdl",
                    "Watermelon",
                    0
                )
            }
            
            if(OLS[2,string] == "coffee"){
                replicate(
                    "models/lt_c/sci_fi/coffee_mug.mdl",
                    "Coffee. Black.",
                    0
                )
            }
            
            if(OLS[2,string] == "antimatter"){
                replicate(
                    "models/lt_c/sci_fi/am_container.mdl",
                    "Antimatter Container",
                    0
                )
            }
            
            if(OLS[2,string] == "ext"){
                replicate(
                    "models/lt_c/sci_fi/extinguisher.mdl",
                    "Fire Extinguisher",
                    0
                )
            }
            
            if(OLS[2,string] == "shuttle"){
                replicate(
                    "models/lt_c/sci_fi/shuttle/shuttle_skybox.mdl",
                    "Shuttle",
                    0
                )
            }
            
            if(OLS[2,string] == "noodles"){
                replicate(
                    "models/slyfo/cup_noodle.mdl",
                    "Noodles. (What is cup-a-soup?)",
                    0
                )
            }
            
            if(OLS[2,string] == "sandwich"){
                replicate(
                    "models/slyfo_2/acc_food_meatsandwichhalf.mdl",
                    "Sandwich",
                    0
                )
            }
            
            if(OLS[2,string] == "sbeptos"){
                replicate(
                    "models/slyfo_2/acc_food_sbeptos.mdl",
                    "Sbeptos",
                    0
                )
            }
            
            if(OLS[2,string] == "tray"){
                replicate(
                    "models/slyfo_2/acc_food_foodtrayfull.mdl",
                    "Food Tray",
                    0
                )
            }
            
            if(OLS[2,string] == "spacemix"){
                replicate(
                    "models/slyfo_2/acc_food_snckspacemix.mdl",
                    "Spacemix",
                    0
                )
            }
            
            if(OLS[2,string] == "nuggets"){
                replicate(
                    "models/slyfo_2/acc_food_snckstridernugs.mdl",
                    "Strider Nuggets",
                    0
                )
            }
            
            if(OLS[2,string] == "medicine"){
                replicate(
                    "models/slyfo_2/acc_ndl4.mdl",
                    "Medicine",
                    0
                )
            }
            
            if(OLS[2,string] == "manual"){
                replicate(
                    "models/spacebuild/sbepmanual.mdl",
                    "SBEP Manual",
                    0
                )
            }
            
            if(OLS[2,string] == "bucket"){
                replicate(
                    "models/props_junk/MetalBucket01a.mdl",
                    "Bucket",
                    0
                )
            }
            
            if(OLS[2,string] == "paint"){
                replicate(
                    "models/props_junk/metal_paintcan001a.mdl",
                    "Paint",
                    0
                )
            }
        }
    }
}

#[
#You'll need to add the new stuff to the replication list in /rep help yourself.

copypaste for adding new stuff:

if(OLS[2,string] == ""){
    replicate(
        "", #model path
        "", #text output
        0 #model offset
    )
}
