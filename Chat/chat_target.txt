@name Chat Target
@inputs LeadingWep:entity #What weapon should attempt to lead the target, limitation of 1 for now
@outputs TarPos:vector Tar:entity TargetOwner:entity TargetLocked Leading
@persist Prefix:string FEnt:entity FEnts:array Color:vector AutoTarget AutoTargetPrint Offset Leading WepVel

#include "Novas-Public-E2s/library/nova_lib"

if(first() | dupefinished()){
    Prefix = "/t" #Target Prefix
    
    AutoTarget = 1 #If Target destroyed, try to target another of the same entity owned by the same person
    
    AutoTargetPrint = 0 #Print in chat when AutoTarget targets a new entity
    
    Leading = 0 #Default target leading setting, can be toggled with '/t lead'
    
    timer("functionsetup",10)
    
    
    WepVel = 3000 #Temp value for leading, 3000 is ship cannon projectile speed, will automate the values later:tm:
    #Weapon leading is very wip and will fuck up every weapon that isn't the LeadingWep
}

if(clk("functionsetup")){
    FEnts = array()
    
    function void target(Ent:entity,Print){
        Tar = Ent
        TarPos = Ent:boxCenterW()
        
        TargetLocked = 1
        
        timer("target",1)
        
        if(Ent:owner():name() == ""){
            TargetOwner = noentity()
            Color = vec(255)
        }
        else{
            TargetOwner = Ent:owner()
            Color = teamColor(Ent:owner():team())
        }
        
        if(Print == 1){
            if(Ent:isPlayer()){
                printColor(ColPink,"[Target] ",ColOng,"Targetting ",teamColor(Ent:team()),Ent:name())
            }
            else{
                printColor(ColPink,"[Target] ",ColOng,"Targetting ",ColGrn,Ent:type(),ColOng," Owned by: ",Color,Ent:owner():name())
            }
        }
        
        if(Tar:type() == "st_shuttle_type11"){
            Offset = 200
        }
        else{
            Offset = 0
        }
    }
}

if(clk("target")){
    timer("target",10)
    
    if(Tar:isValid()){
        if(Leading == 1){
            TarPos = Tar:pos()+Tar:up()*Offset + Tar:vel() * Tar:pos():distance(LeadingWep:pos()) / WepVel
            LeadingWep:setAng((TarPos - LeadingWep:pos()):toAngle())
        }
        else{
            TarPos = Tar:boxCenterW()+Tar:up()*Offset
            LeadingWep:setAng((TarPos - LeadingWep:pos()):toAngle())
        }
        
        TargetLocked = 1
    }
    else{
        if(AutoTarget == 1){
            if(FEnts:count() > 0){
                Tar = FEnts:popEntity()
                
                if(Tar:isValid()){
                    target(Tar,AutoTargetPrint)
                }
            }
            else{
                printColor(ColPink,"[Target] ",ColOng,"Target Lost! Likely destroyed.")
                    
                TargetLocked = 0
                    
                stoptimer("target")
            }
        }
        else{
            printColor(ColPink,"[Target] ",ColOng,"Target Lost! Likely destroyed.")
            
            TargetLocked = 0
            
            stoptimer("target")
        }
    }
}

event chat(SaidPly:entity, Said:string,_){
    local OLS = Said:lower():explode(" ")
    
    if(SaidPly == owner()){
        if(OLS[1,string] == Prefix){
            hideChat(1)
            
            if(OLS[2,string] == "help"){
                printColor(ColPink,"[Target] ",ColOng,"Chat Target Help:")
                printColor(ColPink,"[Target] ",ColOng,"If you're seeing this, I haven't made a help file yet oops")
            }
            elseif(OLS[2,string] == "list"){
                printColor(ColPink,"[Target] ",ColOng,"Target List:")
                printColor(ColOng,TarType:keys():concat(", "))
            }
            elseif(OLS[2,string] == "this" | OLS[2,string] == "that"){
                if(owner():aimEntity():isValid()){
                    target(owner():aimEntity(),1)
                }
                else{
                    printColor(ColPink,"[Target] ",ColOng,"You're not looking at anything!")
                }
            }
            elseif(OLS[2,string] == "here"){
                stoptimer("target")
                
                Tar = noentity()
                TarPos = owner():aimPos()
                
                TargetLocked = 1
                
                printColor(ColPink,"[Target] ",ColOng,"Targetting ",ColGrn,toString(round(owner():aimPos())))
            }
            elseif(OLS[2,string] == "next"){
                FEnts:pushEntity(Tar)
                target(FEnts:shiftEntity(),1)
            }
            elseif(OLS[2,string] == "off"){
                Tar = noentity()
                TarPos = vec(0)
                TargetOwner = noentity()
                
                TargetLocked = 0
                
                stoptimer("target")
                
                printColor(ColPink,"[Target] ",ColOng,"Disabling Targetting")
            }
            elseif(OLS[2,string] == "lead"){
                Leading = !Leading
                
                if(Leading == 1){
                    printColor(ColPink,"[Target] ",ColGrn,"Enabling",ColOng," Target Leading")
                }
                else{
                    printColor(ColPink,"[Target] ",ColRed,"Disabling",ColOng," Target Leading")
                }
            }
            else{
                local Ply = findPlayerByName(OLS[2,string])
                local Ply2 = findPlayerByName(OLS[3,string])
                
                if(Ply:isPlayer()){
                    target(Ply,1)
                }
                else{
                    if(TarType:exists(OLS[2,string])){
                        findByClass(TarType[OLS[2,string],string])
                        findClipToPlayerProps(Ply2)
                        FEnts = findToArray()
                        
                        FEnt = FEnts:popEntity()
                        
                        if(FEnt:isValid()){
                            target(FEnt,1)
                        }
                        else{
                            if(Ply2:isPlayer()){
                                printColor(ColPink,"[Target] ",ColOng,"The Player ",teamColor(Ply2:owner():team()),Ply2:owner():name(),ColOng," Does not own a ",ColRed,OLS[2,string])
                            }
                            else{
                                printColor(ColPink,"[Target] ",ColOng,"Invalid Target!")
                            }
                        }
                    }
                    else{ #Find string2 type owned by string3 player
                        if(Ply2:isPlayer()){
                            findByClass(OLS[2,string])
                            findClipToPlayerProps(Ply2)
                            FEnts = findToArray()
                            
                            FEnt = FEnts:popEntity()
                            
                            if(FEnt:isValid()){
                                target(FEnt,1)
                            }
                            else{
                                if(Ply2:isPlayer()){
                                    printColor(ColPink,"[Target] ",ColOng,"The Player ",teamColor(Ply2:owner():team()),Ply2:owner():name(),ColOng," Does not own a ",ColRed,OLS[2,string])
                                    #I have no fucking clue why this still prints even when its not really a player
                                }
                                else{
                                    printColor(ColPink,"[Target] ",ColOng,"Invalid Target!")
                                }
                            }
                        }
                        else{
                            printColor(ColPink,"[Target] ",ColOng,"There is no player with the name: ",OLS[3,string])
                        }
                    }
                }
            }
        }
    }
}
