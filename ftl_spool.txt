@name Wave Motion Engine Spool
@inputs Warp Destination:vector AngleOffset:angle Drive:wirelink DriveTransit WMESpeed ForceWarp
@outputs DesiredSpeed ConfirmSpeed SpeedRequired DT:string
@persist DT:string SpoolWait DriveType DriveCheck Transitting
#include "Novas-Public-E2s/library/nova_lib"

#To use this, wire Warp and Destination to the warp chip, and unwire the warp chip from any warp drives,
#Wire Drive to either a drive, or a drive selector

if(first() | dupefinished()){
    DesiredSpeed = 100 #Idle Speed
    Transitting = 0
}

if(~Warp & Warp == 1){
    DT = Drive:entity():type()
    
    if(DT == "sg_hyperdrive" | DT == "quantum_slipstream_drive" | DT == "st_warp_drive"){
        printColor(ZeiaOng,"[WME] ",ZeiaWht,"Transit Drive ",ZeiaTBlu,"selected. Waiting for ",ZeiaMBlu,"Wave Motion Engine",ZeiaTBlu," to spool to ",ZeiaWht,"150%")
        
        Drive["Destination",vector] = Destination
        Drive["Angle Offset",angle] = AngleOffset
        
        SpoolWait = 1
        DriveType = 1
        DriveCheck = 1
        SpeedRequired = 150
    }
    
    if(DT == "bsg_drive" | DT == "ship_drive" | DT == "spore_drive"){
        printColor(ZeiaOng,"[WME] ",ZeiaWht,"Jump Drive ",ZeiaTBlu,"selected. Waiting for ",ZeiaMBlu,"Wave Motion Engine",ZeiaTBlu," to spool to ",ZeiaWht,"200%")
        
        Drive["Destination",vector] = Destination
        Drive["Angle Offset",angle] = AngleOffset
        
        SpoolWait = 1
        DriveType = 2
        DriveCheck = 1
        SpeedRequired = 200
    }
    
    if(DriveCheck == 0){
        printColor(ZeiaOng,"[WME] ",ZeiaTBlu,"Unrecognized Drive: [",ZeiaWht,DT,ZeiaTBlu,"] Cannot warp.")
    }
    else{
        DriveCheck = 0
    }
}

if(~WMESpeed & SpoolWait == 1){
    if(DriveType == 1){
        if(WMESpeed >= 150){
            SpoolWait = 0
            
            printColor(ZeiaOng,"[WME] ",ZeiaMBlu,"Wave Motion Engine ",ZeiaTBlu,"Spooled to",ZeiaWht," 150% ",ZeiaTBlu,"Activating Drive")
            timer("spooled",1)
        }
    }
    
    if(DriveType == 2){
        if(WMESpeed >= 200){
            SpoolWait = 0
            
            printColor(ZeiaOng,"[WME] ",ZeiaMBlu,"Wave Motion Engine ",ZeiaTBlu,"Spooled to",ZeiaWht," 200% ",ZeiaTBlu,"Activating Drive")
            timer("spooled",1)
        }
    }
}

if(clk("spooled")){
    Drive["Activate",number] = 1
    
    timer("checktransit",5000)
}

if(clk("checktransit")){
    if(DriveTransit == 0 & Transitting == 0){
        printColor(ZeiaOng,"[WME] ",ZeiaTBlu,"The Drive failed to activate!")
        
        DesiredSpeed = 99.5
        timer("reset",10)
    }
}

if(~DriveTransit){
    Transitting = 1
    
    if(DriveTransit == 0){
        DesiredSpeed = 99.5
        
        timer("reset",1000)
        
    }
}

if(clk("reset")){
    DesiredSpeed = 100
    ConfirmSpeed = 1
    
    Drive["Destination",vector] = vec()
    Drive["Activate",number] = 0
    
    timer("confirmoff",10)
    timer("angreset",11000)
}

if(clk("confirmoff")){
    ConfirmSpeed = 0
}

if(clk("angreset")){
    Drive["Angle Offset",angle] = ang()
    Transitting = 0
}

if(~ForceWarp & ForceWarp == 1){
    timer("spooled",10)
}


event chat(Ply:entity,Said:string,_){
    if(Ply == owner()){
        if(Said:lower():explode(" ")[1,string] == "/forcewarp"){
            timer("spooled",10)
            printColor(ZeiaOng,"[FTL] ",ZeiaTBlu,"ForceWarp initated, Activating ",ZeiaMBlu,"Wave Motion Engine")
        }
    }
}
